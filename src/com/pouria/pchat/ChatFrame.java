/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pouria.pchat;

import com.google.common.base.Charsets;
import com.google.common.io.BaseEncoding;
import com.google.common.io.Files;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.event.HyperlinkEvent;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author PouriaP
 */
public class ChatFrame extends javax.swing.JFrame {

    private Chatman chatman;
    private String[] arguments;
    private String[] textAreaHtml;
    private String incomingTextAll;
    private String[][] emoticonsArray;
    private String userName;
    private List<String> config;
    private String[] backgrounds;

    
    public ChatFrame(String[] args){
        
        arguments = args;
        
        initComponents();
        
        myInits();

    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogPopup = new com.pouria.pchat.PopupDialog();
        panelPopup = new javax.swing.JPanel();
        labelNewMessage = new javax.swing.JLabel();
        labelMessageIcon = new javax.swing.JLabel();
        menuRightClick = new javax.swing.JPopupMenu();
        scrollPaneIncoming = new javax.swing.JScrollPane();
        textAreaIncoming = new javax.swing.JEditorPane();
        scrollPaneOutgoing = new javax.swing.JScrollPane();
        textAreaOutgoing = new javax.swing.JEditorPane();
        incomingBg = new javax.swing.JLabel();
        outgoingBg = new javax.swing.JLabel();
        tableEmojis = new javax.swing.JTable();
        labelSend = new javax.swing.JLabel();
        labelClear = new javax.swing.JLabel();
        labelStatusLabl = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        backgroundOfLabels = new javax.swing.JLabel();
        labelFrameBg = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuChangeBg = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();

        dialogPopup.setAlwaysOnTop(true);
        dialogPopup.setMinimumSize(new java.awt.Dimension(180, 60));
        dialogPopup.setResizable(false);

        panelPopup.setBackground(new java.awt.Color(102, 102, 102));
        panelPopup.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelPopup.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelPopup.setName(""); // NOI18N
        panelPopup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelPopupMouseReleased(evt);
            }
        });

        labelNewMessage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        labelNewMessage.setForeground(new java.awt.Color(231, 231, 231));
        labelNewMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNewMessage.setText("پیام جدید");

        labelMessageIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/new_message_50x50.png"))); // NOI18N

        javax.swing.GroupLayout panelPopupLayout = new javax.swing.GroupLayout(panelPopup);
        panelPopup.setLayout(panelPopupLayout);
        panelPopupLayout.setHorizontalGroup(
            panelPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPopupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelMessageIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelNewMessage)
                .addGap(16, 16, 16))
        );
        panelPopupLayout.setVerticalGroup(
            panelPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelMessageIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelPopupLayout.createSequentialGroup()
                .addComponent(labelNewMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dialogPopupLayout = new javax.swing.GroupLayout(dialogPopup.getContentPane());
        dialogPopup.getContentPane().setLayout(dialogPopupLayout);
        dialogPopupLayout.setHorizontalGroup(
            dialogPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPopup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogPopupLayout.setVerticalGroup(
            dialogPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPopup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        menuRightClick.setBackground(new java.awt.Color(51, 51, 51));
        menuRightClick.setForeground(new java.awt.Color(255, 255, 255));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chatman - (This isn't a chat)");
        setFocusable(false);
        setMinimumSize(new java.awt.Dimension(500, 650));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        scrollPaneIncoming.setOpaque(false);

        textAreaIncoming.setEditable(false);
        textAreaIncoming.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        textAreaIncoming.setContentType("text/html"); // NOI18N
        textAreaIncoming.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        textAreaIncoming.setForeground(new java.awt.Color(255, 255, 255));
        textAreaIncoming.setText("<html></html>");
        textAreaIncoming.setToolTipText("");
        textAreaIncoming.setAutoscrolls(false);
        textAreaIncoming.setOpaque(false);
        textAreaIncoming.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                textAreaIncomingHyperlinkUpdate(evt);
            }
        });
        scrollPaneIncoming.setViewportView(textAreaIncoming);

        getContentPane().add(scrollPaneIncoming);
        scrollPaneIncoming.setBounds(20, 20, 460, 210);

        scrollPaneOutgoing.setBorder(null);
        scrollPaneOutgoing.setOpaque(false);

        textAreaOutgoing.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        textAreaOutgoing.setContentType("text/html"); // NOI18N
        textAreaOutgoing.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        textAreaOutgoing.setForeground(new java.awt.Color(255, 255, 255));
        textAreaOutgoing.setText("<html></html>");
        textAreaOutgoing.setToolTipText("");
        textAreaOutgoing.setCaretColor(new java.awt.Color(255, 255, 255));
        textAreaOutgoing.setOpaque(false);
        textAreaOutgoing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                textAreaOutgoingMouseReleased(evt);
            }
        });
        textAreaOutgoing.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textAreaOutgoingKeyReleased(evt);
            }
        });
        scrollPaneOutgoing.setViewportView(textAreaOutgoing);

        getContentPane().add(scrollPaneOutgoing);
        scrollPaneOutgoing.setBounds(20, 330, 270, 150);

        incomingBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/opacity77.png"))); // NOI18N
        getContentPane().add(incomingBg);
        incomingBg.setBounds(20, 20, 460, 210);

        outgoingBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/opacity77.png"))); // NOI18N
        getContentPane().add(outgoingBg);
        outgoingBg.setBounds(20, 330, 270, 150);

        tableEmojis.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        tableEmojis.setForeground(new java.awt.Color(255, 255, 255));
        tableEmojis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        tableEmojis.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableEmojis.setOpaque(false);
        tableEmojis.setRowHeight(30);
        tableEmojis.setRowSelectionAllowed(false);
        tableEmojis.setSelectionBackground(new java.awt.Color(255, 255, 255));
        tableEmojis.setShowHorizontalLines(false);
        tableEmojis.setShowVerticalLines(false);
        tableEmojis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableEmojisMouseReleased(evt);
            }
        });
        getContentPane().add(tableEmojis);
        tableEmojis.setBounds(300, 330, 170, 150);

        labelSend.setBackground(new java.awt.Color(51, 51, 51));
        labelSend.setFont(new java.awt.Font("B Traffic", 1, 14)); // NOI18N
        labelSend.setForeground(new java.awt.Color(255, 255, 255));
        labelSend.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSend.setText("ارسال");
        labelSend.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labelSend.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelSend.setOpaque(true);
        labelSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelSendMouseReleased(evt);
            }
        });
        getContentPane().add(labelSend);
        labelSend.setBounds(20, 490, 130, 30);

        labelClear.setBackground(new java.awt.Color(51, 51, 51));
        labelClear.setFont(new java.awt.Font("B Traffic", 1, 14)); // NOI18N
        labelClear.setForeground(new java.awt.Color(255, 255, 255));
        labelClear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelClear.setText("پاک کردن");
        labelClear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labelClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelClear.setOpaque(true);
        labelClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelClearMouseReleased(evt);
            }
        });
        getContentPane().add(labelClear);
        labelClear.setBounds(160, 490, 130, 30);

        labelStatusLabl.setForeground(new java.awt.Color(255, 255, 255));
        labelStatusLabl.setText("Status:");
        getContentPane().add(labelStatusLabl);
        labelStatusLabl.setBounds(20, 560, 150, 40);

        labelStatus.setForeground(new java.awt.Color(255, 255, 255));
        labelStatus.setText("Offline");
        getContentPane().add(labelStatus);
        labelStatus.setBounds(170, 560, 300, 40);

        backgroundOfLabels.setBackground(new java.awt.Color(51, 51, 51));
        backgroundOfLabels.setOpaque(true);
        getContentPane().add(backgroundOfLabels);
        backgroundOfLabels.setBounds(0, 560, 500, 40);

        labelFrameBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/bg/batman_1.jpg"))); // NOI18N
        getContentPane().add(labelFrameBg);
        labelFrameBg.setBounds(0, 0, 500, 600);

        menuFile.setText("File");
        menuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileActionPerformed(evt);
            }
        });

        menuChangeBg.setText("Change Background");
        menuChangeBg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuChangeBgActionPerformed(evt);
            }
        });
        menuFile.add(menuChangeBg);

        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        jMenuBar1.add(menuFile);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        chatman.sendBye();
    }//GEN-LAST:event_formWindowClosing

    private void textAreaOutgoingKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaOutgoingKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n'){ 
            send();
        }
    }//GEN-LAST:event_textAreaOutgoingKeyReleased

    private void menuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_menuFileActionPerformed

    private void menuChangeBgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuChangeBgActionPerformed
        // TODO add your handling code here:

        int bgIndex = Arrays.asList(backgrounds).indexOf(getConfig("background-image"));
        bgIndex++;
        String bg = (bgIndex < backgrounds.length)? backgrounds[bgIndex] : backgrounds[0];
        labelFrameBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/bg/" + bg)));
        writeConfig("background-image", bg);
        updateUserName();

    }//GEN-LAST:event_menuChangeBgActionPerformed

    private void tableEmojisMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableEmojisMouseReleased
        // TODO add your handling code here:
        int row = tableEmojis.getSelectedRow();
        int col = tableEmojis.getSelectedColumn();

         String s = textAreaOutgoing.getText();
         if(!s.contains("<div>"))
             s = "";
         else
             s = s.substring((s.indexOf("<div>"))+5, (s.indexOf("</div>"))-1);
         
        String name = emoticonsArray[row][col];
        URL url = getClass().getResource("/resources/emoticons_large/" + name + ".png");
        if(url != null)
            name = url.toString();
        String img = "<img src='" + name + "'  height=50 width=50 />";
        String h = textAreaHtml[0] + s + img +  textAreaHtml[1]; 
        
        textAreaOutgoing.setText(h);
        textAreaOutgoing.requestFocus();
    
    }//GEN-LAST:event_tableEmojisMouseReleased

    private void textAreaIncomingHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_textAreaIncomingHyperlinkUpdate
        // TODO add your handling code here:
        if(evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED){
            try{
                String path = evt.getURL().toString();
                if(path.contains("file://")){
                    path = path.substring(7);
                    Desktop.getDesktop().open(new File(path));
                }
                else
                    Desktop.getDesktop().browse(evt.getURL().toURI());
            }catch(IOException e){
                message("could not open URL: "+e.getMessage());
            }catch(URISyntaxException e){
                message("bad URL syntax: "+e.getMessage());
            }
        }
    }//GEN-LAST:event_textAreaIncomingHyperlinkUpdate

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        // TODO add your handling code here:
        exit();
    }//GEN-LAST:event_menuExitActionPerformed

    private void panelPopupMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelPopupMouseReleased
        // TODO add your handling code here:
        dialogPopup.hidePopup();
        //Show
        this.setVisible(true);
        //Focus
        textAreaOutgoing.requestFocus();
    }//GEN-LAST:event_panelPopupMouseReleased

    private void labelSendMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSendMouseReleased
        // TODO add your handling code here:
        send();
    }//GEN-LAST:event_labelSendMouseReleased

    private void labelClearMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMouseReleased
        // TODO add your handling code here:
        textAreaOutgoing.setText(textAreaHtml[0] + textAreaHtml[1]);
    }//GEN-LAST:event_labelClearMouseReleased

    private void textAreaOutgoingMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textAreaOutgoingMouseReleased
        // TODO add your handling code here:
        if(evt.getButton() == MouseEvent.BUTTON3){
            menuRightClick.show(textAreaOutgoing, evt.getX(), evt.getY());
        } 
    }//GEN-LAST:event_textAreaOutgoingMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        final String[] a = args;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatFrame(a);
            }
        });
    }
     
    private void myInits(){ 
        //Variable inits
        incomingTextAll = "";
        backgrounds = new String[]{
            "batman_1.jpg", "batman_2.jpg", "batman_3.jpg", "batman_4.jpg", 
            "bane_1.jpg", "bane_2.jpg", "bane_3.jpg", "bane_4.jpg", 
            "alien_1.jpg", "alien_2.jpg", "alien_3.jpg", "alien_4.jpg"
        };
        //!!!IMPORTANT: dar esme emoticon ha nabayad adad va alamat bashe. faghat horuf.
        //!!!IMPORTANT: emoticon ha bayad .png bashand va dar foldere emoticons bashand. vagarna bayad regex eslah shavad
        //!!!IMPORTANT: height va width e emoticon ha bayad too tableEmojisMouseReleased too tage <img> neveshte beshe
        //!!IMPORTANT: har taghiiri inja dar esm,folder,format,etc. emoticon ha haselshe bayad to regex ham lahaz she
        /* old emoticon set
        String[] row_0 = {"angel","anger","blush","confused","dead"};
        String[] row_1 = {"devil","erm","GASP","groggy","happy"};
        String[] row_2 = {"happy","HUH","lol","love","meh"};
        String[] row_3 = {"sad","shucks","sleep","smile","squwooshy"};
        String[] row_4 = row_3;
        emoticonsArray = new String[][]{row_0,row_1,row_2,row_3,row_4};
        */
        emoticonsArray = new String[][]{
            {"XD","want","tears","grin","dizzy"},
            {"angry","pissedoff","omg","kaboom","ohno"},
            {"onioncute","onioncool","pokerface","zombie","zZgif"},
            {"yes","grumpyno","grumpy","dog","epicface"},
            {"snail","bat","wifi","reset","question"},
        };
        
        //Read config file
        try{
            File f = new File("config.conf");
            config = Files.readLines(f, Charsets.UTF_8);
        }catch(IOException e){
            message("could not read config file: " + e.getMessage());
            exit();
        }
        
        //TextArea Dorp
        textAreaOutgoing.setDropTarget(new DropTarget() {
            public synchronized void drop(DropTargetDropEvent evt) {
                try {
                    evt.acceptDrop(DnDConstants.ACTION_COPY);
                    List<File> droppedFiles = (List<File>) evt
                            .getTransferable().getTransferData(
                                    DataFlavor.javaFileListFlavor);
                    for (File file : droppedFiles) {

                        textAreaOutgoing.setText(file.getAbsolutePath());
                        try{
                            //10MB
                            if(file.length()> 20*1000*1000){
                                message("حداکثر حجم فایل قابل انتقال ۲۰مگابایت است");
                                continue;
                            }
                            
                            String name = file.getName();
                            name = BaseEncoding.base64().encode(name.getBytes(Charsets.UTF_8));
                            byte[] data = Files.toByteArray(file);
                            String base64data = BaseEncoding.base64().encode(data);
                            chatman.sendFile(name, base64data);
                            
                            updateChatText("File sent: " + file.getName());
                            textAreaOutgoing.setText(textAreaHtml[0]+textAreaHtml[1]);
                        }catch(IOException e){
                            message("could not open file");
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
        

        //TextArea right click
        /*Action copy = new AbstractAction("Copy") {
            @Override
            public void actionPerformed(ActionEvent e) {
                textAreaOutgoing.copy();
            }
        };
        Action cut = new AbstractAction("Cut") {
            @Override
            public void actionPerformed(ActionEvent e) {
                textAreaOutgoing.cut();
            }
        };*/
        Action paste = new AbstractAction("Paste") {
            @Override
            public void actionPerformed(ActionEvent e) {
                textAreaOutgoing.paste();
                String s = textAreaOutgoing.getText();
                //clear html tags and new lines
                s = s.replaceAll("<[\\/\\w]*>", "").replace("\n", "").trim();
                textAreaOutgoing.setText(textAreaHtml[0] + s + textAreaHtml[1]);
            }
        }; 
        
        Action copyAction = textAreaOutgoing.getActionMap().get(DefaultEditorKit.copyAction);
        copyAction.putValue("Name", "Copy");
        Action cutAction = textAreaOutgoing.getActionMap().get(DefaultEditorKit.cutAction);
        cutAction.putValue("Name", "Cut");
        /*
        Action pasteAction = textAreaOutgoing.getActionMap().get(DefaultEditorKit.pasteAction);
        pasteAction.putValue("Name", "Paste");
        */
        
        menuRightClick.add (paste); 
        menuRightClick.add (copyAction);
        menuRightClick.add (cutAction);

        
        //TextArea cursor
        ((HTMLEditorKit)textAreaOutgoing.getEditorKit()).setDefaultCursor(new Cursor(Cursor.TEXT_CURSOR));
        
        
        //TextArea focus
        textAreaOutgoing.requestFocus();
        
        //Table BG
        tableEmojis.setBackground(new Color(50,50,50,170));  

        
        //Populate Table
        //in anonymous ro dorost mikonim baraye inke editable nabashe cell ha
        AbstractTableModel model = new DefaultTableModel(5, 5){
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        for(int row = 0;row<5;row++){
            for(int col = 0;col<5;col++){
                String name = emoticonsArray[row][col];
                URL url = getClass().getResource("/resources/emoticons/" + name + ".png");
                if(url != null)
                    name = url.toString();
                String h = "<html><img src='" + name + "' /></html>";
                model.setValueAt(h, row, col);
            }
        }
        tableEmojis.setModel(model);

        
        //Frame BG
        String bg = getConfig("background-image");
        labelFrameBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/bg/" + bg)));
        updateUserName();
       
        
        //Default HTML Texts
        textAreaHtml = new String[2];
        textAreaHtml[0] = "<html><div style='direction:rtl;color:white;font-family:Tahoma;font-size:12px;cursor: text;'>";
        textAreaHtml[1] = "</div></html>";
        
        textAreaIncoming.setText(textAreaHtml[0]+textAreaHtml[1]);
        textAreaOutgoing.setText(textAreaHtml[0]+textAreaHtml[1]);
        
        
        //Make ScrollPanes invisible
        scrollPaneOutgoing.setOpaque(false);
        scrollPaneOutgoing.getViewport().setOpaque(false);
        scrollPaneIncoming.setOpaque(false);
        scrollPaneIncoming.getViewport().setOpaque(false);
              
        //Icon
        java.net.URL url = getClass().getResource("/resources/icon.png");
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.createImage(url);
        this.setIconImage(img);
        
        //Center
        this.setLocationRelativeTo(null);
        
        
        //Start as server/client
        //Server?
        if(arguments.length == 1){
            chatman = new ChatmanServer(this);
            chatman.start();
        }
        //Client?
        else if(arguments.length == 0){ 
            chatman = new ChatmanClient(this);
            chatman.connect(false);
            this.setVisible(true);
        }
        else{
            message("invalid command line arguments");
            exit();
        }
        
    } 
    
    private void send(){
        //is run when Enter is pressed or Ersal is pressed
        if(chatman.getMode() == Chatman.MOD_CLIENT)
            if(!chatman.isServerSocketSet()){
                message("در حال جستجوی شبکه. لطفا منتظر بمانید.");
                return;
        }
        String s = textAreaOutgoing.getText();
        //return if textarea is empty
        if(!s.contains("<div>"))
            return;
        //s style ha ro be dalili nadare. HTMLe khalie
        s = s.substring((s.indexOf("<div>"))+5, (s.indexOf("</div>"))-1);
        //get rid of \n and trim (baraye inke \n readline ro kharab mikone. har message bayad yek khat bashe)
        s = s.replace("\n", "").trim();
        
        updateChatText("<b>" + userName + "</b>(you): " + s);
        chatman.send("<b>" + userName + "</b>: " + s);
        
        textAreaOutgoing.setText(textAreaHtml[0]+textAreaHtml[1]);
    }
    
    public void updateChatText(String t){
        //updates the textareaIncoming. Is run when we say something or the other guy says something
        
        //popup when first message received
        if(isHidden()){
            dialogPopup.showPopup();
            dialogPopup.playSound();
        }
        //bleep if we received message and was not focused
        else if(!this.isActive()){
            dialogPopup.playSound();
        }

        //internet links
        t = t.replaceAll("((http|https)://[^\\s]*)\\s?", "<a style='color:#dee3e9;font-weight:bold;' href='$1'>$1</a> ");
        //file links
        t = t.replaceAll("(file:\\/\\/([^\\.]*\\.[\\w\\d]{3,5}))", "<a style='color:#dee3e9;font-weight:bold;' href='$1'>$2</a> ");
        //emoticons
        //masale ei ke inja vojud dare ine ke vaghti khodemun message mifrestim ham be hamin tabe miad
        //va ezafe mishe be textAreaIncoming. pas vaghti ma emoticon mifrestim avval tabdil be URL mishe
        //bad dar inja dobare replace mishe ba URL khodemun. vali eb nadare be nazaram :)
        String url = getClass().getResource("/resources/emoticons_large/").toString();
        t = t.replaceAll("img\\ssrc=[^>]*emoticons_large\\/([\\w]*\\.png)", "img src=" + url + "$1");
        
        incomingTextAll = incomingTextAll + t + "<br />";
        String h = textAreaHtml[0] + incomingTextAll + textAreaHtml[1]; 
        textAreaIncoming.setText(h);
    }
    
    //Utility functions
    public String getConfig(String confName){
        if(config.indexOf(confName) != -1){
            String r = config.get(config.indexOf(confName)+1).trim();
            return r;
        }
        message("configuration " + confName + " doesn't exist in config.conf");
        exit();
        return "";
    }
    
    public boolean isConfigAvailable(String confName){
        if(config.indexOf(confName) != -1)
            return true;
        return false;
    }
    
    public void writeConfig(String confName, String confValue){
        config.set(config.indexOf(confName)+1, confValue);
        String configAll = "";
        try {
            for(String line:config){
                configAll = configAll + line + "\r\n";
            }
            Files.write(configAll , new File("config.conf"), Charsets.UTF_8);
        } catch (IOException e) {
            message("could not write configuration to file: " + e.getMessage());
        }
    }
    
    public Chatman getChatmanInstance(){
        return chatman;
    }
    
    public void updateUserName(){
        //esme background ha be in shekl as
        userName = getConfig("background-image").split("_")[0];
        userName = userName.substring(0, 1).toUpperCase() + userName.substring(1,userName.length());
    }
    
    public boolean isHidden(){
        if(!this.isVisible() && !dialogPopup.isVisible())
            return true;
        return false;
    }
    
    public void setLabelStatus(String s){
        labelStatus.setText(s);
    }
    
    public void message(String m){
        m = "<html><span style='font-size:14px;'>" + m + "</span></html>";
        JOptionPane.showMessageDialog(null, m);
    } 
    
    public void exit(){
        System.exit(0);
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundOfLabels;
    private com.pouria.pchat.PopupDialog dialogPopup;
    private javax.swing.JLabel incomingBg;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel labelClear;
    private javax.swing.JLabel labelFrameBg;
    private javax.swing.JLabel labelMessageIcon;
    private javax.swing.JLabel labelNewMessage;
    private javax.swing.JLabel labelSend;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelStatusLabl;
    private javax.swing.JMenuItem menuChangeBg;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JPopupMenu menuRightClick;
    private javax.swing.JLabel outgoingBg;
    private javax.swing.JPanel panelPopup;
    private javax.swing.JScrollPane scrollPaneIncoming;
    private javax.swing.JScrollPane scrollPaneOutgoing;
    private javax.swing.JTable tableEmojis;
    private javax.swing.JEditorPane textAreaIncoming;
    private javax.swing.JEditorPane textAreaOutgoing;
    // End of variables declaration//GEN-END:variables
}

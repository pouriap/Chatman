/*
 * Copyright (c) 2020. Pouria Pirhadi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pouria.chatman.gui;

import com.pouria.chatman.*;
import com.pouria.chatman.classes.AbstractSQLPagination;
import com.pouria.chatman.commands.CmdFatalErrorExit;
import com.pouria.chatman.commands.CmdShowError;
import com.pouria.chatman.connection.HttpClient;
import com.pouria.chatman.messages.*;

import javax.swing.*;
import javax.swing.event.HyperlinkEvent;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;
import java.awt.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.*;
import java.io.*;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.List;


/**
 *
 * @author PouriaP
 * 
 * This file has the main() function and is the entry point of the application
 * 
 */
@SuppressWarnings("ALL")
public class ChatFrame extends javax.swing.JFrame {

    private Chatman chatman;
    private String defaultTextAreaHtml;
	private StyleSheet cssHideTime;
	private StyleSheet cssShowTime;
	private timeDisplay conversationShowTime = timeDisplay.HIDE_TIME;
    private AbstractSQLPagination historyPagination;
	private String[][][] emoticonsArray;
	private int emojisIndex = -1; //-1 chon bare avval mikhaim bere be 0
	private String username;
	private AdjustmentListener scrollListenerAlwaysDown;
	private TrayIcon trayIconApp, trayIconNewMessage;
	private CMNotifPopup newMessagePopup;
	private CMTheme currentTheme, peerTheme;
	private CMTheme previewTheme;
	private CMNotifPopup previewPopup;
	private CMTextArea textAreaInput, textAreaConvo;

	private enum timeDisplay{
	    HIDE_TIME, SHOW_TIME;
    }

	private final String version = "3.0.6";
	private final String appTitle = "Chatman Forever";

    private ChatFrame(){
        initComponents();
    }
    
    
	public static ChatFrame getInstance() {
		return ChatFrame.ChatFrameHolder.INSTANCE;
	}

	private static class ChatFrameHolder {
		private static final ChatFrame INSTANCE = new ChatFrame();
	}
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuRightClick = new javax.swing.JPopupMenu();
        dialogHistory = new javax.swing.JDialog();
        scrollPaneHistory = new javax.swing.JScrollPane();
        tableHistory = new javax.swing.JTable();
        buttonNextHistoryPage = new javax.swing.JButton();
        buttonPrevHistoryPage = new javax.swing.JButton();
        dialogChooseTheme = new javax.swing.JDialog();
        panelChooseTheme = new javax.swing.JPanel();
        labelBgPrev = new javax.swing.JLabel();
        labelPopupPrev = new javax.swing.JLabel();
        dropdownThemes = new javax.swing.JComboBox<>();
        buttonThemeApply = new javax.swing.JButton();
        labelThemeName = new javax.swing.JLabel();
        buttonThemePreview = new javax.swing.JButton();
        scrollPaneConversation = new javax.swing.JScrollPane();
        editorPaneConversation = new javax.swing.JEditorPane();
        scrollPaneInput = new javax.swing.JScrollPane();
        editorPaneInput = new javax.swing.JEditorPane();
        tableEmojis = new javax.swing.JTable();
        labelConvoBg = new javax.swing.JLabel();
        labelInputBg = new javax.swing.JLabel();
        labelTableBg = new javax.swing.JLabel();
        labelMouseDetector = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        labelNextEmojiPage = new javax.swing.JLabel();
        labelPrevEmojiPage = new javax.swing.JLabel();
        labelSend = new javax.swing.JLabel();
        labelClear = new javax.swing.JLabel();
        labelStatusLabl = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        labelStatusIcon = new javax.swing.JLabel();
        labelStatusBackground = new javax.swing.JLabel();
        labelFrameBg = new javax.swing.JLabel();
        menubarMain = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuShowHistory = new javax.swing.JMenuItem();
        menuChooseTheme = new javax.swing.JMenuItem();
        menuSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuOverridePopup = new javax.swing.JCheckBoxMenuItem();
        menuSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuRemoteShutdown = new javax.swing.JMenuItem();
        menuAbortRemoteShutdown = new javax.swing.JMenuItem();
        menuAbortLocalShutdown = new javax.swing.JMenuItem();
        menuWakeOnLan = new javax.swing.JMenuItem();
        menuSeparator3 = new javax.swing.JPopupMenu.Separator();
        menuAbout = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();

        menuRightClick.setBackground(new java.awt.Color(51, 51, 51));
        menuRightClick.setForeground(new java.awt.Color(255, 255, 255));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/pouria/chatman/gui/Bundle"); // NOI18N
        dialogHistory.setTitle(bundle.getString("ChatFrame.dialogHistory.title")); // NOI18N
        dialogHistory.setAlwaysOnTop(true);
        dialogHistory.setIconImage(null);
        dialogHistory.setMinimumSize(new java.awt.Dimension(300, 300));
        dialogHistory.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                dialogHistoryComponentShown(evt);
            }
        });
        dialogHistory.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dialogHistoryWindowClosing(evt);
            }
        });

        tableHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Conversation Text"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableHistory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableHistory.setRowHeight(30);
        tableHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableHistoryMouseReleased(evt);
            }
        });
        scrollPaneHistory.setViewportView(tableHistory);

        buttonNextHistoryPage.setText(bundle.getString("ChatFrame.buttonNextHistoryPage.text")); // NOI18N
        buttonNextHistoryPage.setEnabled(false);
        buttonNextHistoryPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextHistoryPageActionPerformed(evt);
            }
        });

        buttonPrevHistoryPage.setText(bundle.getString("ChatFrame.buttonPrevHistoryPage.text")); // NOI18N
        buttonPrevHistoryPage.setEnabled(false);
        buttonPrevHistoryPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrevHistoryPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogHistoryLayout = new javax.swing.GroupLayout(dialogHistory.getContentPane());
        dialogHistory.getContentPane().setLayout(dialogHistoryLayout);
        dialogHistoryLayout.setHorizontalGroup(
            dialogHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogHistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogHistoryLayout.createSequentialGroup()
                        .addComponent(buttonPrevHistoryPage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonNextHistoryPage, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPaneHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
                .addContainerGap())
        );
        dialogHistoryLayout.setVerticalGroup(
            dialogHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogHistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dialogHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonNextHistoryPage)
                    .addComponent(buttonPrevHistoryPage))
                .addContainerGap())
        );

        dialogChooseTheme.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dialogChooseTheme.setTitle(bundle.getString("ChatFrame.dialogChooseTheme.title")); // NOI18N
        dialogChooseTheme.setIconImage(null);
        dialogChooseTheme.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        dialogChooseTheme.setResizable(false);
        dialogChooseTheme.setSize(new java.awt.Dimension(800, 620));
        dialogChooseTheme.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dialogChooseThemeWindowClosing(evt);
            }
        });

        labelBgPrev.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelBgPrev.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), bundle.getString("ChatFrame.labelBgPrev.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(51, 51, 51))); // NOI18N
        labelBgPrev.setMaximumSize(new java.awt.Dimension(350, 450));
        labelBgPrev.setMinimumSize(new java.awt.Dimension(350, 450));
        labelBgPrev.setPreferredSize(new java.awt.Dimension(350, 450));

        labelPopupPrev.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPopupPrev.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), bundle.getString("ChatFrame.labelPopupPrev.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(51, 51, 51))); // NOI18N

        dropdownThemes.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dropdownThemes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dropdownThemes.setPreferredSize(new java.awt.Dimension(90, 30));
        dropdownThemes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropdownThemesActionPerformed(evt);
            }
        });

        buttonThemeApply.setText(bundle.getString("ChatFrame.buttonThemeApply.text")); // NOI18N
        buttonThemeApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonThemeApplyActionPerformed(evt);
            }
        });

        labelThemeName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelThemeName.setForeground(new java.awt.Color(51, 51, 51));
        labelThemeName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelThemeName.setText(bundle.getString("ChatFrame.labelThemeName.text")); // NOI18N
        labelThemeName.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), bundle.getString("ChatFrame.labelThemeName.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(51, 51, 51))); // NOI18N

        buttonThemePreview.setText(bundle.getString("ChatFrame.buttonThemePreview.text")); // NOI18N
        buttonThemePreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonThemePreviewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelChooseThemeLayout = new javax.swing.GroupLayout(panelChooseTheme);
        panelChooseTheme.setLayout(panelChooseThemeLayout);
        panelChooseThemeLayout.setHorizontalGroup(
            panelChooseThemeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelChooseThemeLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelChooseThemeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelChooseThemeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(dropdownThemes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelBgPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonThemePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelChooseThemeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelPopupPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelThemeName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonThemeApply, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        panelChooseThemeLayout.setVerticalGroup(
            panelChooseThemeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelChooseThemeLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(panelChooseThemeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelChooseThemeLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(dropdownThemes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(labelThemeName, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelChooseThemeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelPopupPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBgPrev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelChooseThemeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonThemeApply)
                    .addComponent(buttonThemePreview))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout dialogChooseThemeLayout = new javax.swing.GroupLayout(dialogChooseTheme.getContentPane());
        dialogChooseTheme.getContentPane().setLayout(dialogChooseThemeLayout);
        dialogChooseThemeLayout.setHorizontalGroup(
            dialogChooseThemeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelChooseTheme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogChooseThemeLayout.setVerticalGroup(
            dialogChooseThemeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelChooseTheme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(bundle.getString("ChatFrame.title")); // NOI18N
        setFocusable(false);
        setMinimumSize(new java.awt.Dimension(500, 650));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        scrollPaneConversation.setBorder(null);
        scrollPaneConversation.setOpaque(false);
        scrollPaneConversation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                scrollPaneConversationMouseEntered(evt);
            }
        });

        editorPaneConversation.setEditable(false);
        editorPaneConversation.setBorder(null);
        editorPaneConversation.setContentType("text/html"); // NOI18N
        editorPaneConversation.setAutoscrolls(false);
        editorPaneConversation.setOpaque(false);
        editorPaneConversation.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                editorPaneConversationHyperlinkUpdate(evt);
            }
        });
        editorPaneConversation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editorPaneConversationMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                editorPaneConversationMouseEntered(evt);
            }
        });
        scrollPaneConversation.setViewportView(editorPaneConversation);

        getContentPane().add(scrollPaneConversation);
        scrollPaneConversation.setBounds(25, 34, 440, 190);

        scrollPaneInput.setBorder(null);
        scrollPaneInput.setOpaque(false);

        editorPaneInput.setBorder(null);
        editorPaneInput.setContentType("text/html"); // NOI18N
        editorPaneInput.setCaretColor(new java.awt.Color(255, 255, 255));
        editorPaneInput.setOpaque(false);
        editorPaneInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                editorPaneInputMouseReleased(evt);
            }
        });
        editorPaneInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                editorPaneInputKeyPressed(evt);
            }
        });
        scrollPaneInput.setViewportView(editorPaneInput);

        getContentPane().add(scrollPaneInput);
        scrollPaneInput.setBounds(30, 330, 255, 145);

        tableEmojis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        tableEmojis.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableEmojis.setGridColor(new java.awt.Color(255, 255, 255));
        tableEmojis.setOpaque(false);
        tableEmojis.setRowHeight(30);
        tableEmojis.setRowSelectionAllowed(false);
        tableEmojis.setSelectionBackground(new java.awt.Color(255, 255, 255));
        tableEmojis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableEmojisMouseReleased(evt);
            }
        });
        getContentPane().add(tableEmojis);
        tableEmojis.setBounds(300, 328, 175, 150);

        labelConvoBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/label-top-dark-normal.png"))); // NOI18N
        getContentPane().add(labelConvoBg);
        labelConvoBg.setBounds(20, 10, 460, 230);

        labelInputBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/label-bottom-dark-normal.png"))); // NOI18N
        getContentPane().add(labelInputBg);
        labelInputBg.setBounds(20, 310, 280, 180);

        labelTableBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/label-table-dark-normal.png"))); // NOI18N
        getContentPane().add(labelTableBg);
        labelTableBg.setBounds(292, 317, 200, 170);

        labelMouseDetector.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelMouseDetectorMouseEntered(evt);
            }
        });
        getContentPane().add(labelMouseDetector);
        labelMouseDetector.setBounds(30, 250, 430, 40);
        getContentPane().add(progressBar);
        progressBar.setBounds(30, 240, 435, 14);

        labelNextEmojiPage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNextEmojiPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/label-next-dark-normal.png"))); // NOI18N
        labelNextEmojiPage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelNextEmojiPage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelNextEmojiPageMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelNextEmojiPageMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelNextEmojiPageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelNextEmojiPageMouseReleased(evt);
            }
        });
        getContentPane().add(labelNextEmojiPage);
        labelNextEmojiPage.setBounds(390, 490, 30, 25);

        labelPrevEmojiPage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrevEmojiPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/label-prev-dark-normal.png"))); // NOI18N
        labelPrevEmojiPage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelPrevEmojiPage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelPrevEmojiPageMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelPrevEmojiPageMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelPrevEmojiPageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelPrevEmojiPageMouseReleased(evt);
            }
        });
        getContentPane().add(labelPrevEmojiPage);
        labelPrevEmojiPage.setBounds(350, 490, 30, 25);

        labelSend.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ui_en_US/label-send-dark-normal.png"))); // NOI18N
        labelSend.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelSendMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelSendMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelSendMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelSendMouseReleased(evt);
            }
        });
        getContentPane().add(labelSend);
        labelSend.setBounds(35, 490, 120, 40);

        labelClear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ui_en_US/label-clear-dark-normal.png"))); // NOI18N
        labelClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelClearMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelClearMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelClearMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelClearMouseReleased(evt);
            }
        });
        getContentPane().add(labelClear);
        labelClear.setBounds(160, 490, 120, 40);

        labelStatusLabl.setBackground(new java.awt.Color(51, 51, 51));
        labelStatusLabl.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelStatusLabl.setForeground(new java.awt.Color(51, 51, 51));
        labelStatusLabl.setText(bundle.getString("ChatFrame.labelStatusLabl.text")); // NOI18N
        getContentPane().add(labelStatusLabl);
        labelStatusLabl.setBounds(20, 560, 50, 30);

        labelStatus.setBackground(new java.awt.Color(51, 51, 51));
        labelStatus.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        labelStatus.setForeground(new java.awt.Color(51, 51, 51));
        labelStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelStatus.setText(bundle.getString("ChatFrame.labelStatus.text")); // NOI18N
        getContentPane().add(labelStatus);
        labelStatus.setBounds(170, 560, 300, 30);

        labelStatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/disconnected.png"))); // NOI18N
        getContentPane().add(labelStatusIcon);
        labelStatusIcon.setBounds(80, 560, 30, 30);

        labelStatusBackground.setBackground(new java.awt.Color(239, 239, 239));
        labelStatusBackground.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelStatusBackground.setAlignmentY(0.0F);
        labelStatusBackground.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.darkGray));
        labelStatusBackground.setOpaque(true);
        getContentPane().add(labelStatusBackground);
        labelStatusBackground.setBounds(-5, 560, 560, 40);

        labelFrameBg.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        labelFrameBg.setIconTextGap(0);
        labelFrameBg.setMaximumSize(new java.awt.Dimension(500, 600));
        labelFrameBg.setMinimumSize(new java.awt.Dimension(500, 600));
        labelFrameBg.setPreferredSize(new java.awt.Dimension(500, 600));
        getContentPane().add(labelFrameBg);
        labelFrameBg.setBounds(0, 0, 494, 600);

        menubarMain.setBackground(new java.awt.Color(204, 204, 204));

        menuFile.setText(bundle.getString("ChatFrame.menuFile.text")); // NOI18N
        menuFile.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menuFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuFile.setMargin(new java.awt.Insets(0, 10, 0, 0));
        menuFile.setPreferredSize(new java.awt.Dimension(70, 23));
        menuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileActionPerformed(evt);
            }
        });

        menuShowHistory.setText(bundle.getString("ChatFrame.menuShowHistory.text")); // NOI18N
        menuShowHistory.setToolTipText(bundle.getString("ChatFrame.menuShowHistory.toolTipText")); // NOI18N
        menuShowHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuShowHistoryActionPerformed(evt);
            }
        });
        menuFile.add(menuShowHistory);

        menuChooseTheme.setText(bundle.getString("ChatFrame.menuChooseTheme.text")); // NOI18N
        menuChooseTheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuChooseThemeActionPerformed(evt);
            }
        });
        menuFile.add(menuChooseTheme);
        menuFile.add(menuSeparator1);

        menuOverridePopup.setSelected(true);
        menuOverridePopup.setText(bundle.getString("ChatFrame.menuOverridePopup.text")); // NOI18N
        menuOverridePopup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOverridePopupActionPerformed(evt);
            }
        });
        menuFile.add(menuOverridePopup);
        menuFile.add(menuSeparator2);

        menuRemoteShutdown.setText(bundle.getString("ChatFrame.menuRemoteShutdown.text")); // NOI18N
        menuRemoteShutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRemoteShutdownActionPerformed(evt);
            }
        });
        menuFile.add(menuRemoteShutdown);

        menuAbortRemoteShutdown.setText(bundle.getString("ChatFrame.menuAbortRemoteShutdown.text")); // NOI18N
        menuAbortRemoteShutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbortRemoteShutdownActionPerformed(evt);
            }
        });
        menuFile.add(menuAbortRemoteShutdown);

        menuAbortLocalShutdown.setText(bundle.getString("ChatFrame.menuAbortLocalShutdown.text")); // NOI18N
        menuAbortLocalShutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbortLocalShutdownActionPerformed(evt);
            }
        });
        menuFile.add(menuAbortLocalShutdown);

        menuWakeOnLan.setText(bundle.getString("ChatFrame.menuWakeOnLan.text")); // NOI18N
        menuWakeOnLan.setEnabled(false);
        menuWakeOnLan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuWakeOnLanActionPerformed(evt);
            }
        });
        menuFile.add(menuWakeOnLan);
        menuFile.add(menuSeparator3);

        menuAbout.setText(bundle.getString("ChatFrame.menuAbout.text")); // NOI18N
        menuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutActionPerformed(evt);
            }
        });
        menuFile.add(menuAbout);

        menuExit.setText(bundle.getString("ChatFrame.menuExit.text")); // NOI18N
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        menubarMain.add(menuFile);

        setJMenuBar(menubarMain);

        getAccessibleContext().setAccessibleName(bundle.getString("ChatFrame.AccessibleContext.accessibleName")); // NOI18N
        getAccessibleContext().setAccessibleDescription(bundle.getString("ChatFrame.AccessibleContext.accessibleDescription")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		hideWindow();
    }//GEN-LAST:event_formWindowClosing

    private void menuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileActionPerformed
        
    }//GEN-LAST:event_menuFileActionPerformed

    private void tableEmojisMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableEmojisMouseReleased

        int row = tableEmojis.getSelectedRow();
        int col = tableEmojis.getSelectedColumn();
         
        //replace the emoticon image with the larger image. we also add the width=50 and height=50 for better display
        String img = (String) tableEmojis.getValueAt(row, col);
		img = img.replaceAll("<html>(.*)emoticons(.*\\.gif')\\s(\\/>)<\\/html>", "$1emoticons_large$2  $3");

        textAreaInput.appendText(img);
        editorPaneInput.requestFocus();
    
    }//GEN-LAST:event_tableEmojisMouseReleased

    private void editorPaneConversationHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_editorPaneConversationHyperlinkUpdate
        //triggered when we click on a link
        if(evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED){
            try{

                String path = evt.getURL().toString();
                
                //open if it was a file
                if(path.contains("file://")){
                    String filePath = path.substring(7);
                    try {
                        File file = new File(filePath);
                        Desktop.getDesktop().open(file);
                    } catch (IOException e) {
                    	//in case the file has no association open the directory
                        try {
	                        File chatmanDlDirectory = new File(CMHelper.getInstance().getCMDownloadsDir());
	                        Desktop.getDesktop().open(chatmanDlDirectory);
                        }catch (Exception ee){
							//if directory can't be opened either show error
	                        message(CMHelper.getInstance().getStr("cannot_open_file"));
                        }
                    }
                }
                //browse if it was a URL
                else {
	                Desktop.getDesktop().browse(evt.getURL().toURI());
                }
            }catch(IOException e){
                message(CMHelper.getInstance().getStr("url_open_fail"));
				CMHelper.getInstance().log("failed to open url: " + e.getMessage());
            }catch(Exception e){
                message(CMHelper.getInstance().getStr("bad_url"));
				CMHelper.getInstance().log("bad url: " + e.getMessage());
			}
        }
		
    }//GEN-LAST:event_editorPaneConversationHyperlinkUpdate

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void labelClearMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMouseReleased
		changeLabelIcon((JLabel)evt.getComponent(), "normal");
		clearInputText();
    }//GEN-LAST:event_labelClearMouseReleased

    private void editorPaneInputMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editorPaneInputMouseReleased
        //show the right-click menu
        if(evt.getButton() == MouseEvent.BUTTON3){
            menuRightClick.show(editorPaneInput, evt.getX(), evt.getY());
        } 
    }//GEN-LAST:event_editorPaneInputMouseReleased

    private void menuShowHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuShowHistoryActionPerformed
        //show history dialog
		int x = this.getLocationOnScreen().x - dialogHistory.getSize().width;
		if(x < 0){
			x = this.getLocationOnScreen().x + this.getSize().width;
		}
		int y = this.getLocationOnScreen().y;
		dialogHistory.setLocation(x, y);
        dialogHistory.setVisible(true);
    }//GEN-LAST:event_menuShowHistoryActionPerformed

    private void tableHistoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableHistoryMouseReleased
        //put selected history item in textAreaChatHistory
        int row = tableHistory.getSelectedRow();
        String savedHistory = tableHistory.getModel().getValueAt(row, 1).toString();
		textAreaConvo.setText(savedHistory);
        
    }//GEN-LAST:event_tableHistoryMouseReleased

    private void dialogHistoryWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_dialogHistoryWindowClosing
        //restore the incoming text
		updateConversationText();
    }//GEN-LAST:event_dialogHistoryWindowClosing

    private void buttonNextHistoryPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextHistoryPageActionPerformed

    	//clear table
	    ((DefaultTableModel)tableHistory.getModel()).setRowCount(0);

        try{
            historyPagination.nextPage();
            buttonNextHistoryPage.setEnabled(historyPagination.hasNext());
            buttonPrevHistoryPage.setEnabled(historyPagination.hasPrev());
        }catch(Exception e){
			CMHelper.getInstance().log("history next page failed: " + e.getMessage());
            message(CMHelper.getInstance().getStr("history_fail"));
        }
    }//GEN-LAST:event_buttonNextHistoryPageActionPerformed

    private void buttonPrevHistoryPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrevHistoryPageActionPerformed

	    //clear table
	    ((DefaultTableModel)tableHistory.getModel()).setRowCount(0);

        try{
            historyPagination.prevPage();
            buttonNextHistoryPage.setEnabled(historyPagination.hasNext());
            buttonPrevHistoryPage.setEnabled(historyPagination.hasPrev());
        }catch(Exception e){
			CMHelper.getInstance().log("history prev page failed: " + e.getMessage());
            message(CMHelper.getInstance().getStr("history_fail"));
        }
    }//GEN-LAST:event_buttonPrevHistoryPageActionPerformed

    private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutActionPerformed
        String aboutTitle = appTitle + " v" + version;
		String aboutContent  = CMHelper.getInstance().getStr("about_content");
		JOptionPane.showMessageDialog(null, aboutContent, aboutTitle, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuAboutActionPerformed

    private void menuRemoteShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRemoteShutdownActionPerformed

		int answer = JOptionPane.showConfirmDialog(null, CMHelper.getInstance().getStr("remote_shutdown_message"), CMHelper.getInstance().getStr("remote_shutdown_title"), JOptionPane.YES_NO_OPTION);
        if(answer == JOptionPane.YES_OPTION){
            ShutdownMessage message = ShutdownMessage.getNewOutgoing();
			chatman.sendMessage(message);
        }
    }//GEN-LAST:event_menuRemoteShutdownActionPerformed

    private void menuWakeOnLanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuWakeOnLanActionPerformed
        
		throw new UnsupportedOperationException("not supported yet");
		/*
		try{
			CMHelper.getInstance().sendWakeOnLan("remote_ip");
			
		}catch(IOException e){
			message(CMHelper.getInstance().getStr("wakeonlan_fail"));
		}
		*/
    }//GEN-LAST:event_menuWakeOnLanActionPerformed

    private void labelNextEmojiPageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelNextEmojiPageMouseReleased
        changeLabelIcon((JLabel)evt.getComponent(), "normal");
		nextEmojiPage();
    }//GEN-LAST:event_labelNextEmojiPageMouseReleased

    private void labelPrevEmojiPageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrevEmojiPageMouseReleased
		changeLabelIcon((JLabel)evt.getComponent(), "normal");
		prevEmojiPage();
    }//GEN-LAST:event_labelPrevEmojiPageMouseReleased

    private void menuAbortLocalShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbortLocalShutdownActionPerformed
		try{
			CMHelper.getInstance().abortLocalShutdown();
			String info = "[INFO: REMOTE SHUTDOWN ABORTED BY USER]";
            TextMessage message = TextMessage.getNewOutgoing(info);
			chatman.sendMessage(message);
		}catch(IOException e){
			CMHelper.getInstance().log("failed to abort local shutdown (from menu)");
			(new CmdShowError(CMHelper.getInstance().getStr("shutdown-abort-fail"))).execute();  // we don't need invokelater because we're on GUI
		}
    }//GEN-LAST:event_menuAbortLocalShutdownActionPerformed

    private void labelSendMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSendMousePressed
		changeLabelIcon((JLabel)evt.getComponent(), "pressed");
    }//GEN-LAST:event_labelSendMousePressed

    private void editorPaneInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editorPaneInputKeyPressed
		if (evt.getKeyChar() == '\n'){ 
			evt.consume();
            sendInputText();
        }
    }//GEN-LAST:event_editorPaneInputKeyPressed

    private void menuAbortRemoteShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbortRemoteShutdownActionPerformed
		int answer = JOptionPane.showConfirmDialog(null, CMHelper.getInstance().getStr("abort_remote_shutdown_message"), CMHelper.getInstance().getStr("abort_remote_shutdown_title"), JOptionPane.YES_NO_OPTION);
        if(answer == JOptionPane.YES_OPTION){
            AbortShutdownMessage message = AbortShutdownMessage.getNewOutgoing();
			chatman.sendMessage(message);
        }
    }//GEN-LAST:event_menuAbortRemoteShutdownActionPerformed

    private void editorPaneConversationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editorPaneConversationMouseClicked

		if(evt.getButton() == MouseEvent.BUTTON1){
			return;
		}

		if(conversationShowTime == timeDisplay.HIDE_TIME){
			textAreaConvo.showTime();
		}
		else{
			textAreaConvo.hideTime();
		}

		conversationShowTime = (conversationShowTime == timeDisplay.SHOW_TIME)?
                timeDisplay.HIDE_TIME : timeDisplay.SHOW_TIME;

    }//GEN-LAST:event_editorPaneConversationMouseClicked

    private void editorPaneConversationMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editorPaneConversationMouseEntered
		scrollPaneConversation.getVerticalScrollBar().removeAdjustmentListener(scrollListenerAlwaysDown);
    }//GEN-LAST:event_editorPaneConversationMouseEntered

    private void scrollPaneConversationMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrollPaneConversationMouseEntered
        scrollPaneConversation.getVerticalScrollBar().removeAdjustmentListener(scrollListenerAlwaysDown);
    }//GEN-LAST:event_scrollPaneConversationMouseEntered

    private void labelSendMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSendMouseEntered
		changeLabelIcon((JLabel)evt.getComponent(), "hover");
    }//GEN-LAST:event_labelSendMouseEntered

    private void labelSendMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSendMouseExited
		changeLabelIcon((JLabel)evt.getComponent(), "normal");
    }//GEN-LAST:event_labelSendMouseExited

    private void labelClearMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMouseEntered
		changeLabelIcon((JLabel)evt.getComponent(), "hover");
    }//GEN-LAST:event_labelClearMouseEntered

    private void labelClearMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMouseExited
		changeLabelIcon((JLabel)evt.getComponent(), "normal");
    }//GEN-LAST:event_labelClearMouseExited

    private void labelPrevEmojiPageMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrevEmojiPageMouseEntered
		changeLabelIcon((JLabel)evt.getComponent(), "hover");
    }//GEN-LAST:event_labelPrevEmojiPageMouseEntered

    private void labelPrevEmojiPageMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrevEmojiPageMouseExited
        changeLabelIcon((JLabel)evt.getComponent(), "normal");
    }//GEN-LAST:event_labelPrevEmojiPageMouseExited

    private void labelNextEmojiPageMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelNextEmojiPageMouseEntered
		changeLabelIcon((JLabel)evt.getComponent(), "hover");
    }//GEN-LAST:event_labelNextEmojiPageMouseEntered

    private void labelNextEmojiPageMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelNextEmojiPageMouseExited
        changeLabelIcon((JLabel)evt.getComponent(), "normal");
    }//GEN-LAST:event_labelNextEmojiPageMouseExited

    private void labelSendMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSendMouseReleased
        changeLabelIcon((JLabel)evt.getComponent(), "normal");
		sendInputText();
    }//GEN-LAST:event_labelSendMouseReleased

    private void labelPrevEmojiPageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrevEmojiPageMousePressed
        changeLabelIcon((JLabel)evt.getComponent(), "pressed");
    }//GEN-LAST:event_labelPrevEmojiPageMousePressed

    private void labelNextEmojiPageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelNextEmojiPageMousePressed
        changeLabelIcon((JLabel)evt.getComponent(), "pressed");
    }//GEN-LAST:event_labelNextEmojiPageMousePressed

    private void labelClearMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMousePressed
        changeLabelIcon((JLabel)evt.getComponent(), "pressed");
    }//GEN-LAST:event_labelClearMousePressed

    private void dialogHistoryComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_dialogHistoryComponentShown
		
		//is run everytime history dialog shows 
	    historyPagination = CMHistory.getPagination(tableHistory);
	    //clear table
	    ((DefaultTableModel)tableHistory.getModel()).setRowCount(0);

        try{
            historyPagination.nextPage();
            buttonNextHistoryPage.setEnabled(historyPagination.hasNext());
        }catch(Exception e){
			CMHelper.getInstance().log("failed to show history window: " + e.getMessage());
            message(CMHelper.getInstance().getStr("history_fail"));
        }
		
    }//GEN-LAST:event_dialogHistoryComponentShown
		
	//ye labele makhfi ke vaghti mouse az textarea bala biroon miad scrollo dorost kone
    private void labelMouseDetectorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelMouseDetectorMouseEntered
		//fix scroll only if mouse is entering from the top
		int y = evt.getY();
		if(y<10){
			fixConvoScroll();
		}
    }//GEN-LAST:event_labelMouseDetectorMouseEntered

    private void menuChooseThemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuChooseThemeActionPerformed
		
		//set things to default
		dropdownThemes.removeAllItems();
		previewTheme = null;
		labelPopupPrev.setIcon(null);
		labelBgPrev.setIcon(null);
		
		try{
			File themesDir = new File(CMConfig.getInstance().get("themes-dir", CMConfig.DEFAULT_THEMES_DIR));
			Files.list(themesDir.toPath()).forEach((Path t) -> {
			    String fileName = t.getFileName().toString();
				String[] s = fileName.split("\\.");
				String extension = s[s.length-1];
				if("cmtheme".equals(extension) || "zip".equals(extension)){
                    dropdownThemes.addItem(fileName);
                    //select current theme by default
                    if(fileName.equals(currentTheme.getFileName())){
                        dropdownThemes.setSelectedItem(fileName);
                    }
				}
			});
			dialogChooseTheme.setLocationRelativeTo(null);
			dialogChooseTheme.setVisible(true);
			
		}catch(Exception e){
			message(CMHelper.getInstance().getStr("themes_listing_failed"));
			CMHelper.getInstance().log("failed to get list of themes: " + e.getMessage());
		}
    }//GEN-LAST:event_menuChooseThemeActionPerformed

    private void dropdownThemesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropdownThemesActionPerformed
		
		if(dropdownThemes.getSelectedItem() == null){
			return;
		}
		
		if(previewPopup != null){
			if(previewPopup.isVisible()){
				previewPopup.hide();
			}
		}
		
		try{
			String themeName = (String) dropdownThemes.getSelectedItem();
			previewTheme = CMTheme.getFromDefaultDir(themeName);
			Image bg = previewTheme.getBgImage().getImage().getScaledInstance(
					330, 400, Image.SCALE_SMOOTH);
			
			labelBgPrev.setIcon(new ImageIcon(bg));
			labelPopupPrev.setIcon(previewTheme.getPopupImage());
			labelThemeName.setText(previewTheme.getUsername());
		}catch(Exception e ){
			message("Bad theme file");
			CMHelper.getInstance().log("bad theme file selected: " + e.getMessage());
		}
    }//GEN-LAST:event_dropdownThemesActionPerformed

    private void buttonThemeApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonThemeApplyActionPerformed
        currentTheme = previewTheme;
		applyCurrentTheme();
		CMConfig.getInstance().set("theme", currentTheme.getFileName());
		CMConfig.getInstance().save();
    }//GEN-LAST:event_buttonThemeApplyActionPerformed

    private void dialogChooseThemeWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_dialogChooseThemeWindowClosing
        if(previewPopup != null){
			if(previewPopup.isVisible()){
				previewPopup.hide();
			}
		}
		previewTheme = null;
		previewPopup = null;
    }//GEN-LAST:event_dialogChooseThemeWindowClosing

    private void buttonThemePreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonThemePreviewActionPerformed
		
		if(previewPopup != null){
			if(previewPopup.isVisible()){
				previewPopup.hide();
			}
		}
		
		previewPopup = new CMNotifPopup(previewTheme);
		previewPopup.show();
		previewPopup.playSound();
		
    }//GEN-LAST:event_buttonThemePreviewActionPerformed

    private void menuOverridePopupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOverridePopupActionPerformed
        boolean selected = menuOverridePopup.isSelected();
        String config = (selected)? "yes" : "no";
        CMConfig.getInstance().set("override-notification-theme", config);
        CMConfig.getInstance().save();
        updateNewMessagePopup();
    }//GEN-LAST:event_menuOverridePopupActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

	    try{
		    System.setOut(new PrintStream("stdout.txt"));
		    System.setErr(new PrintStream("stderr.txt"));
	    }catch(FileNotFoundException e){}

		do_pregui_checks();
		
        /* Set the look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


		/* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
				ChatFrame frame = ChatFrame.getInstance();
				//in tartib bayad bashe hatman
				try{
                    frame.initialize();
                    frame.startChatman();
                }catch(Exception e){
                    String error = "Initialization failed: " + e.getMessage();
                    String causeError = (e.getCause() != null) ?
                            "\n" + "Cause: " + e.getCause().getMessage() : "";
                    (new CmdFatalErrorExit(error + causeError, e)).execute();
                }
            }
        });
    }
		
	//bejash folder ro baz konim dar in halat
	private static void do_pregui_checks(){
		
		//set default locale
		String configLocale = CMConfig.getInstance().get("locale", CMConfig.DEFAULT_LOCALE);
		String language = configLocale.split("_")[0];
		String country = configLocale.split("_")[1];
		Locale locale = new Locale(language, country);
		Locale.setDefault(locale);

		//send a showgui message to localhost, if localhost responds we exit
		ShowGUIMessage showGUIMessage = ShowGUIMessage.getNewOutgoing();
		int port = Integer.parseInt(CMConfig.getInstance().get("server-port", CMConfig.DEFAULT_SERVER_PORT));
		String[] ipsToScan = new String[]{"127.0.0.1"};
		OutgoingMsgHandler sender = new OutgoingMsgHandler(
			showGUIMessage, new HttpClient(port, ipsToScan, CMHelper.getInstance()::log));
		sender.send();
		if(showGUIMessage.getStatus() == CMMessage.Status.SENT){
			System.exit(0);
		}

	}
     

    public void initialize() throws Exception {

		this.setTitle(appTitle);

		textAreaInput = new CMTextArea(editorPaneInput);
		textAreaConvo = new CMTextArea(editorPaneConversation);

		createTrayIcons();
		Objects.requireNonNull(trayIconApp);
        Objects.requireNonNull(trayIconNewMessage);
		
		// Show tray if config says yes
		if(CMConfig.getInstance().get("show-tray-icon", CMConfig.DEFAULT_SHOWTRAY).equals("yes")){
			setTrayIconVisible(trayIconApp, true);
		}
		
        // TextArea drag-n-drop
        editorPaneInput.setDropTarget(new DropTarget() {
			@Override
            public synchronized void drop(DropTargetDropEvent evt) {
                try {
                    evt.acceptDrop(DnDConstants.ACTION_COPY);
                    List<File> droppedFiles = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                    for (File file : droppedFiles) {
                        //check file size
                        int max = Integer.valueOf(CMConfig.getInstance().get("max-file-size", CMConfig.DEFAULT_FILEDROP_SIZEWARNING));
                        if(file.length()> max*1000*1000){
                            int choice = JOptionPane.showConfirmDialog(null, CMHelper.getInstance().getStr("file_big_warning"), CMHelper.getInstance().getStr("file_big_title"), JOptionPane.YES_NO_OPTION);
							if(choice == JOptionPane.NO_OPTION){
								//skip this file
								continue;
							}
                        }
                        //send the file
						FileMessage fileMessage = FileMessage.getNewOutgoing(file);
						//avoid getting a notification sound when dragging the file because window gets out of focus
						ChatFrame.getInstance().toFront();
						chatman.sendMessage(fileMessage);
                    }
                } catch (Exception ex) {
                    message(CMHelper.getInstance().getStr("open_file_fail"));
                    CMHelper.getInstance().log("file drag failed: " + ex.getMessage());
                }
            }
        });

        // TextArea right click

        //create a paste action to replace the default one because the default copoies styles/html too
        Action pasteAction = new AbstractAction(CMHelper.getInstance().getStr("paste")) {
            @Override
            public void actionPerformed(ActionEvent e) {
				//only raw text is pasted in a textfield with no styles/html
				JTextField tempField = new JTextField();
				tempField.paste();
				String pastedText = tempField.getText();
				//agar ax darim faghat akhar paste kon chon nemish
				if(textAreaInput.getText().contains("<img")){
					textAreaInput.appendText(pastedText);
					return;
				}
				//vaghti yek ghesmat as text select shode va mikhaim oonja paste konim				
				String selectedText = editorPaneInput.getSelectedText();
				if(selectedText!=null && !selectedText.isEmpty()){
					String currentText = editorPaneInput.getText();
					currentText = currentText.replace(selectedText, pastedText);
					editorPaneInput.setText(currentText);
					return;
				}
				//vaghti vasate text paste mikonim
				int currentCaretPos = editorPaneInput.getCaretPosition();
				editorPaneInput.setCaretPosition(editorPaneInput.getDocument().getLength());
				int lastCaretPos = editorPaneInput.getCaretPosition();
				if(currentCaretPos != lastCaretPos){
					String currentText = textAreaInput.getText();
					String firstHalf = currentText.substring(0, currentCaretPos-1);
					String secondHalf = currentText.substring(currentCaretPos-1, currentText.length());
					textAreaInput.setText(firstHalf+pastedText+secondHalf);
					editorPaneInput.setCaretPosition(currentCaretPos + pastedText.length());
					return;
				}
				//vaghti akhare text paste mikonim
				textAreaInput.appendText(pastedText);
				
            }
        };
		
		//replace default paste action with our own
		ActionMap map = editorPaneInput.getActionMap();
		map.put(DefaultEditorKit.pasteAction, pasteAction);
		       
        //get default copy and cut actions
        Action copyAction = editorPaneInput.getActionMap().get(DefaultEditorKit.copyAction);
        copyAction.putValue("Name", CMHelper.getInstance().getStr("copy"));
        Action cutAction = editorPaneInput.getActionMap().get(DefaultEditorKit.cutAction);
        cutAction.putValue("Name", CMHelper.getInstance().getStr("cut"));
		
		//add copy/cut/paste actions to our right click menu
        menuRightClick.add (pasteAction); 
        menuRightClick.add (copyAction);
        menuRightClick.add (cutAction);

        // TextArea cursor
        ((HTMLEditorKit)editorPaneInput.getEditorKit()).setDefaultCursor(new Cursor(Cursor.TEXT_CURSOR));

        // Table BG transparent
        tableEmojis.setBackground(new Color(0,0,0,0));  
		tableEmojis.setGridColor(new Color(0,0,0,0));
        
        // Populate Table
        //!!!IMPORTANT: only words in emoticons name 
        //!!!IMPORTANT: emoticons should have .gif extention and be stored in /resources/emoticons folder
        //!!!IMPORTANT: any change made here, or to emoticons names,format,folder,etc. should be also applied to regular expression accross the code
        emoticonsArray = new String[][][]{
			{
				{"hi", "smoke", "xd", "amazing", "victory"},
				{"bleed", "desperate", "spiral", "shake", "shooting"},
				{"calmdownwide", "killwide", "getout", "wallbangwide", "extraordinary"},
				{"yes", "grumpyno", "grumpy", "dog", "epicface"},
				{"snail", "wifi", "reset", "power", "question"}
			},
			{
				{"badluck", "ballerina", "boring", "dancing", "dizzy"},
				{"dunno", "exorcist", "flying", "happiness", "dancingg"},
				{"happyy", "help", "killme", "killmyself", "looser"},
				{"magic", "dreaming", "nah", "nono", "patpat"},
				{"poking", "scratching", "sleeping", "smooth", "stars"}
			},
			{
				{"steal", "taichi", "teehee", "what", "yeah"},
				{"yesss", "yipee", "dancingg", "bat", "na"},
				{"null", "null", "null", "null", "null"},
				{"null", "null", "null", "null", "null"},
				{"null", "null", "null", "null", "null"}
			}
        };
		nextEmojiPage();

        // Make ScrollPanes invisible
        scrollPaneInput.setOpaque(false);
        scrollPaneInput.getViewport().setOpaque(false);
        scrollPaneConversation.setOpaque(false);
        scrollPaneConversation.getViewport().setOpaque(false);
		
		// To fix conversation scroll not going all the way down
		scrollListenerAlwaysDown = new AdjustmentListener() {  
			public void adjustmentValueChanged(AdjustmentEvent e) {  
				e.getAdjustable().setValue(e.getAdjustable().getMaximum());  
			}
		};

	    // Customized scrollbars UI
	    JScrollBar scrollbarV = scrollPaneConversation.getVerticalScrollBar();
	    scrollbarV.setOpaque(false);
	    int defaultHeight = scrollbarV.getPreferredSize().height;
	    scrollbarV.setPreferredSize(new Dimension(10, defaultHeight));

	    JScrollBar scrollbarH = scrollPaneConversation.getHorizontalScrollBar();
	    scrollbarH.setOpaque(false);
	    int defaultWidth = scrollbarH.getPreferredSize().width;
	    scrollbarH.setPreferredSize(new Dimension(defaultWidth, 10));

	    // Theme
	    try{
		    String themeName = CMConfig.getInstance().get("theme", CMConfig.DEFAULT_THEME);
		    currentTheme = CMTheme.getFromDefaultDir(themeName);
	    }catch(Exception e){
		    CMHelper.getInstance().log("getting theme failed. getting default theme");
		    currentTheme = CMTheme.getDefaultTheme();
	    }

	    applyCurrentTheme();

        // Application icon
        Toolkit toolkit = Toolkit.getDefaultToolkit();	
		ArrayList<Image> icons = new ArrayList<Image>();
		Image icon48 = toolkit.createImage(getClass().getResource("/resources/icon48.png"));
		Image icon32 = toolkit.createImage(getClass().getResource("/resources/icon32.png"));
		Image icon24 = toolkit.createImage(getClass().getResource("/resources/icon24.png"));
		icons.add(icon48);
		icons.add(icon32);
		icons.add(icon24);
		this.setIconImages(icons);
		
        // History dialog
        URL urlHistory = getClass().getResource("/resources/icon_history.png");
        Image historyIcon = toolkit.createImage(urlHistory);
        dialogHistory.setIconImage(historyIcon);
		
		// Theme choose dialog
		URL urlThemeChoose = getClass().getResource("/resources/icon16.png");
        Image themeChooseIcon = toolkit.createImage(urlThemeChoose);
		dialogChooseTheme.setIconImage(themeChooseIcon);
		
		// Hide text column in history table
		tableHistory.removeColumn(tableHistory.getColumnModel().getColumn(1));

        // History table header I18N because netbeans doesn't do it
        String date = CMHelper.getInstance().getStr("date");
        tableHistory.getTableHeader().getColumnModel().getColumn(0).setHeaderValue(date);

		// Hide wake on lan menu
		menuWakeOnLan.setVisible(false);

		// Iransans font for everything
        if( "fa_IR".equals( CMConfig.getInstance().get("locale", "en_US") ) ){
	        try{
		        InputStream is = getClass().getResourceAsStream("/resources/iransans.ttf");
		        Font font = Font.createFont(Font.TRUETYPE_FONT, is);
		        Font iranSans = font.deriveFont(12f);
		        menuFile.setFont(iranSans);
		        menuChooseTheme.setFont(iranSans);
		        menuShowHistory.setFont(iranSans);
		        menuOverridePopup.setFont(iranSans);
		        menuRemoteShutdown.setFont(iranSans);
		        menuAbortRemoteShutdown.setFont(iranSans);
		        menuAbortLocalShutdown.setFont(iranSans);
		        menuAbout.setFont(iranSans);
		        menuExit.setFont(iranSans);
		        labelStatus.setFont(iranSans);
		        labelStatusLabl.setFont(iranSans);
		        tableHistory.setFont(iranSans);
		        buttonThemeApply.setFont(iranSans);
		        buttonThemePreview.setFont(iranSans);
                ((javax.swing.border.TitledBorder) labelBgPrev.getBorder()).
                        setTitleFont(iranSans);
                ((javax.swing.border.TitledBorder) labelPopupPrev.getBorder()).
                        setTitleFont(iranSans);
                ((javax.swing.border.TitledBorder) labelThemeName.getBorder()).
                        setTitleFont(iranSans);
	        }catch(Exception e){
		        //font will revert to default
	        }
        }

		// Hide progressbar
		progressBar.setVisible(false);

        // Set override menu as checked if option is set
        String override = CMConfig.getInstance().get("override-notification-theme",
                CMConfig.DEFAULT_OVERRIDE_NOTIFICATION);
        boolean selected = ("yes".equals(override))? true : false;
        menuOverridePopup.setSelected(selected);

	    // Center
	    this.setLocationRelativeTo(null);

	    // Input focus
	    editorPaneInput.requestFocus();
		
    } 
    
    // Start Chatman
    public void startChatman() throws Exception{
		try{
			chatman = new Chatman();
			chatman.start();
		}catch(Exception e){
		    throw new Exception("Could not start server", e);
		}
    }
    
    // Called from myInits()
	public void createTrayIcons(){

        if (!SystemTray.isSupported()) {
			CMHelper.getInstance().log("System tray not supported");
            return;
        }
				
		ImageIcon appIcon = new ImageIcon(getClass().getResource("/resources/icon16.png"));
		ImageIcon newMessageIcon = new ImageIcon(getClass().getResource("/resources/new-message16.png"));
        trayIconApp = new TrayIcon(appIcon.getImage());
		trayIconNewMessage = new TrayIcon(newMessageIcon.getImage());
		
		trayIconApp.setImageAutoSize(false);
		trayIconApp.setToolTip(appTitle);
		trayIconNewMessage.setImageAutoSize(false);
		trayIconNewMessage.setToolTip(CMHelper.getInstance().getStr("new_message"));
		
        // create a right-click menu 
		PopupMenu rclickMenu = new PopupMenu();
        MenuItem openItem = new MenuItem("Open");
        MenuItem exitItem = new MenuItem("Exit");
        openItem.setFont(new java.awt.Font("Tahoma", Font.PLAIN, 14));
        exitItem.setFont(new java.awt.Font("Tahoma", Font.PLAIN, 14));
        rclickMenu.add(openItem);
        rclickMenu.add(exitItem);
        trayIconApp.setPopupMenu(rclickMenu);
		
		//create actions
		ActionListener actionOpen = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				popopClicked(MouseEvent.BUTTON1);
			}
		};
		ActionListener actionExit = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				exit(0);
			}
		};
		
		//add actions to items and double-click
		trayIconApp.addActionListener(actionOpen);
		openItem.addActionListener(actionOpen);
		exitItem.addActionListener(actionExit);
		trayIconNewMessage.addActionListener(actionOpen);
		
	}
	
	public void setTrayIconVisible(TrayIcon trayIcon, boolean visible){
        try {
			SystemTray systemTray = SystemTray.getSystemTray();
			if(visible){
				systemTray.add(trayIcon);
			}
			else{
				systemTray.remove(trayIcon);
			}
        } catch (AWTException e) {
			CMHelper.getInstance().log("Tray icon could not be added");
        }
	}
	
	public void changeLabelIcon(JLabel label, String state){
		
		if(state == null){
			state = "normal";
		}
		else if(state.isEmpty()){
			state = "normal";
		}

		String labelsTheme = currentTheme.getButtonsTheme();
		String textAreasTheme = currentTheme.getTextAreasTheme();

		String iconImagesTemplate = "/resources/label-*name*-*theme*-*state*.png";
		String textImagesTemplate = "/resources/ui_*locale*/label-*name*-*theme*-*state*.png";
		String path = "";

		//set locale
		String locale = Locale.getDefault().toString();
		textImagesTemplate = textImagesTemplate.replace("*locale*", locale);
		
		if(label == labelSend){
			path = textImagesTemplate.replace("*name*", "send").replace("*theme*", labelsTheme).replace("*state*", state);
		}
		else if(label == labelClear){
			path = textImagesTemplate.replace("*name*", "clear").replace("*theme*", labelsTheme).replace("*state*", state);
		}
		else if(label == labelPrevEmojiPage){
			path = iconImagesTemplate.replace("*name*", "prev").replace("*theme*", labelsTheme).replace("*state*", state);
		}
		else if(label == labelNextEmojiPage){
			path = iconImagesTemplate.replace("*name*", "next").replace("*theme*", labelsTheme).replace("*state*", state);
		}
		else if(label == labelConvoBg){
			path = iconImagesTemplate.replace("*name*", "top").replace("*theme*", textAreasTheme).replace("*state*", state);
		}
		else if(label == labelInputBg){
			path = iconImagesTemplate.replace("*name*", "bottom").replace("*theme*", textAreasTheme).replace("*state*", state);
		}
		else if(label == labelTableBg){
			path = iconImagesTemplate.replace("*name*", "table").replace("*theme*", textAreasTheme).replace("*state*", state);
		}
		
		ImageIcon icon = (new ImageIcon(getClass().getResource(path)));
		label.setIcon(icon);
		
	}
	
	//populates a table with emoticons and returns the table model
	public AbstractTableModel getEmoticonTable(String[][] emoticonsArray){
		
			//make table cells uneditable
			AbstractTableModel model = new DefaultTableModel(5, 5){
				@Override
				public boolean isCellEditable(int row, int column){
					return false;
				}
			};

			//add emoticons to cells
			for(int row = 0;row<5;row++){
				for(int col = 0;col<5;col++){
					String name = emoticonsArray[row][col];
					URL url = getClass().getResource("/resources/emoticons/" + name + ".gif");
					String html;
					if(url == null){
						html = "<html></html>";
					}
					else{
						html = "<html><img src='" + url.toString() + "' /></html>";
					}
					model.setValueAt(html, row, col);
				}
			}
			
			return model;
	}
	
	//loads next set of emojis
	public void nextEmojiPage(){
		
		if(emojisIndex >= (emoticonsArray.length - 1) ){
			emojisIndex = 0;
		}
		else{
			emojisIndex++;
		}
		
		AbstractTableModel model = getEmoticonTable(emoticonsArray[emojisIndex]);
		tableEmojis.setModel(model);
		
	}
	
	//loads previous set of emojis
	public void prevEmojiPage(){
		
		if(emojisIndex <= 0){
			emojisIndex = (emoticonsArray.length -1);
		}
		else{
			emojisIndex--;
		}
		
		AbstractTableModel model = getEmoticonTable(emoticonsArray[emojisIndex]);
		tableEmojis.setModel(model);
		
	}

    //sends the content of editorPaneInput
    private void sendInputText(){
		
		fixConvoScroll();
    
        String text = textAreaInput.getText();
        
        //return if input is empty
        if(text.isEmpty())
            return;

	    TextMessage message = TextMessage.getNewOutgoing(text);
		chatman.sendMessage(message);

		clearInputText();

    }
    
    //adds a message to messages history and shows it in conversation panel
    //it is called both when we sendInputText a message or receive a message
    public void showMessage(DisplayableMessage message){
		
		//don't do anything for ping and other shit messages
		if(message.getAsHTMLString().isEmpty()){
			return;
		}

		//todo: is everything shown like 100 times???
	    System.out.println("showing: " + message.getTime());
		updateConversationText();
		
		//check peer theme
		if(message.getDirection()==CMMessage.Direction.IN && overridePopup()==false){
			String senderTheme = message.getSenderTheme();
			try{
				if(peerTheme == null || !peerTheme.getFileName().equals(senderTheme)){
					peerTheme = CMTheme.getFromDefaultDir(message.getSenderTheme());
					setPeerTheme(peerTheme);
				}
			}catch(Exception e){
				RequestThemeMessage reqThemeMsg = RequestThemeMessage.getNewOutgoing(senderTheme);
				OutgoingMsgHandler handler = new OutgoingMsgHandler(reqThemeMsg);
				handler.sendAsync();
				return;
			}
		}

		if(message.getDirection() == CMMessage.Direction.IN){
			showNewMessagePopup();
		}
			
    }
	 
	private void updateConversationText(){
		String conversationText = (chatman != null)? chatman.getAllMessagesText() : "";
		textAreaConvo.setText(conversationText);
	}

    public void clearInputText(){
        textAreaInput.setText("");
    }
	
	private void fixConvoScroll(){
		//fix for scroll
		int listenersCount = scrollPaneConversation.getVerticalScrollBar().getAdjustmentListeners().length;
		if(listenersCount == 0){
			scrollPaneConversation.getVerticalScrollBar().addAdjustmentListener(scrollListenerAlwaysDown);
		}
	}
	
	public void updateProgressBar(int progress){
		if(progress == 100){
			progressBar.setVisible(false);
		}
		else{
			progressBar.setVisible(true);
			progressBar.setValue(progress);
		}
	}
    
	public void applyCurrentTheme(){

        Objects.requireNonNull(currentTheme);

		labelFrameBg.setIcon(currentTheme.getBgImage());

        username = currentTheme.getUsername();

        updateNewMessagePopup();

        textAreaConvo.setTheme(currentTheme);
        textAreaInput.setTheme(currentTheme);

        if(conversationShowTime == timeDisplay.SHOW_TIME){
            textAreaConvo.showTime();
        }
        else{
	        textAreaConvo.hideTime();
        }

		scrollPaneConversation.getVerticalScrollBar().setUI(new CMScrollbarUI(currentTheme));
		scrollPaneConversation.getHorizontalScrollBar().setUI(new CMScrollbarUI(currentTheme));

		//set label icons
		changeLabelIcon(labelConvoBg, "");
		changeLabelIcon(labelInputBg, "");
		changeLabelIcon(labelTableBg, "");
		changeLabelIcon(labelSend, "");
		changeLabelIcon(labelClear, "");
		changeLabelIcon(labelPrevEmojiPage, "");
		changeLabelIcon(labelNextEmojiPage, "");
		
	}


	public String getUserName(){
		return this.username;
	}
	   
    //gives us the hero that we don't deserve
    public Chatman getChatmanInstance(){
        return chatman;
    }
	
	public void popopClicked(int mouseButton){
        //close the "New Message" popup and show the application window
        newMessagePopup.hide();
		//if click show windows else just hide popup
		if(mouseButton == MouseEvent.BUTTON1){
			//Show
			showWindow();
			//Focus
			editorPaneInput.requestFocus();
		}
		else{
			setTrayIconVisible(trayIconNewMessage, true);
		}
	}
	
	public void showNewMessagePopup(){
		//popup and play sound if we're hidden
		if(!this.isVisible() && !newMessagePopup.isVisible()){
            newMessagePopup.show();
			newMessagePopup.playSound();
        }
        //bleep only if we received message and was not focused
        else if(!this.isActive()){
            newMessagePopup.playSound();
        }
	}
	
	public CMTheme getCurrentTheme(){
		return currentTheme;
	}
	
	public CMTheme getPeerTheme(){
		return peerTheme;
	}
	
	public void setPeerTheme(CMTheme peerTheme){
		this.peerTheme = peerTheme;
        updateNewMessagePopup();
	}

	private void updateNewMessagePopup(){

        if(newMessagePopup!=null && newMessagePopup.isVisible()){
            newMessagePopup.hide();
        }

        try {
            if (menuOverridePopup.isSelected()) {
                newMessagePopup = new CMNotifPopup(currentTheme);
            } else {
                newMessagePopup = new CMNotifPopup(peerTheme);
            }
        }catch(Exception e){
            newMessagePopup = new CMNotifPopup(CMTheme.getDefaultTheme());
        }

    }

    //sets the status label at the bottom
    public void setLabelStatus(String s){
        labelStatus.setText(s);
		setTrayIconText(s);
    }
	
	//sets tray icon tooltip text
	public void setTrayIconText(String s){
		trayIconApp.setToolTip(s);
	}
    
    //shows a message
    public void message(String m){
        m = "<html><span style='font-size:14px;'>" + m + "</span></html>";
        JOptionPane.showMessageDialog(null, m);
    } 
	
	//shows loading gif
	public void changeStatusIcon(String iconName){
		labelStatusIcon.setIcon((new ImageIcon(getClass().getResource("/resources/"+iconName))));
	}
	
	public boolean overridePopup(){
		return menuOverridePopup.isSelected();
	}
	  	
	//hides the chatman windows
	public void hideWindow(){
		//this.setVisible(false);
		//apparently it's better to use dispose because it releases all resources
		this.dispose();
	}
	
	//shows the chatman window
	public void showWindow(){
		this.setVisible(true);
		//maximize
		if(this.getExtendedState() == ICONIFIED){
			this.setExtendedState(NORMAL);
		}
		//remove new message tray icon
		setTrayIconVisible(trayIconNewMessage, false);
	}
	
	
    //the end of chatman. that's it. no auto pilot :(
    public synchronized void exit(int exitCode){
        chatman.saveHistory();
        CMConfig.getInstance().save();
        System.exit(exitCode);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonNextHistoryPage;
    private javax.swing.JButton buttonPrevHistoryPage;
    private javax.swing.JButton buttonThemeApply;
    private javax.swing.JButton buttonThemePreview;
    private javax.swing.JDialog dialogChooseTheme;
    private javax.swing.JDialog dialogHistory;
    private javax.swing.JComboBox<String> dropdownThemes;
    private javax.swing.JLabel labelBgPrev;
    private javax.swing.JLabel labelClear;
    private javax.swing.JLabel labelConvoBg;
    private javax.swing.JLabel labelFrameBg;
    private javax.swing.JLabel labelInputBg;
    private javax.swing.JLabel labelMouseDetector;
    private javax.swing.JLabel labelNextEmojiPage;
    private javax.swing.JLabel labelPopupPrev;
    private javax.swing.JLabel labelPrevEmojiPage;
    private javax.swing.JLabel labelSend;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelStatusBackground;
    private javax.swing.JLabel labelStatusIcon;
    private javax.swing.JLabel labelStatusLabl;
    private javax.swing.JLabel labelTableBg;
    private javax.swing.JLabel labelThemeName;
    private javax.swing.JMenuItem menuAbortLocalShutdown;
    private javax.swing.JMenuItem menuAbortRemoteShutdown;
    private javax.swing.JMenuItem menuAbout;
    private javax.swing.JMenuItem menuChooseTheme;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JCheckBoxMenuItem menuOverridePopup;
    private javax.swing.JMenuItem menuRemoteShutdown;
    private javax.swing.JPopupMenu menuRightClick;
    private javax.swing.JPopupMenu.Separator menuSeparator1;
    private javax.swing.JPopupMenu.Separator menuSeparator2;
    private javax.swing.JPopupMenu.Separator menuSeparator3;
    private javax.swing.JMenuItem menuShowHistory;
    private javax.swing.JMenuItem menuWakeOnLan;
    private javax.swing.JMenuBar menubarMain;
    private javax.swing.JPanel panelChooseTheme;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JScrollPane scrollPaneConversation;
    private javax.swing.JScrollPane scrollPaneHistory;
    private javax.swing.JScrollPane scrollPaneInput;
    private javax.swing.JTable tableEmojis;
    private javax.swing.JTable tableHistory;
    private javax.swing.JEditorPane editorPaneConversation;
    private javax.swing.JEditorPane editorPaneInput;
    // End of variables declaration//GEN-END:variables
}

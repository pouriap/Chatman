/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pouria.chatman.gui;

import com.pouria.chatman.CMConfig;
import com.pouria.chatman.Chatman;
import com.pouria.chatman.CMMessage;
import com.pouria.chatman.CMHelper;
import com.pouria.chatman.classes.CmdFatalErrorExit;
import com.pouria.chatman.classes.CmdInvokeLater;
import com.pouria.chatman.classes.CmdShowError;
import com.pouria.chatman.classes.HistoryTablePagination;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.SQLException;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.HyperlinkEvent;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.StyleSheet;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

/**
 *
 * @author PouriaP
 * 
 * This file has the main() function and is the entry point of the application
 * 
 */
public class ChatFrame extends javax.swing.JFrame {

    private static ChatFrame instance = null; 
    private Chatman chatman;
    private String defaultTextAreaHtml;
	private StyleSheet cssHideTime;
	private StyleSheet cssShowTime;
	private int conversationPaneCssToggle = 1;
    private HistoryTablePagination historyPagination;
	private String[][][] emoticonsArray;
	private int emojisIndex = -1; //-1 chon bare avval mikhaim bere be 0
	private String username;
	private String horizontalLineHtml;
	private AdjustmentListener scrollListenerAlwaysDown;
	PopupDialog newMessagePopup;
	
	private final Color colorLabelHovered = new Color(81, 81, 81);
	private final Color colorLabelNormal = new Color(51, 51, 51);
	
	private final long HR_TIMEDIFF = 1000*60*60;	//1hour

	
	

    private ChatFrame(){
        initComponents();
    }
    
    
    public static ChatFrame getInstance(){
        if(instance == null)
            instance = new ChatFrame();
        
        return instance;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogPopupNormal = new com.pouria.chatman.gui.PopupDialog();
        panelPopupNormal = new javax.swing.JPanel();
        labelNewMessage = new javax.swing.JLabel();
        labelMessageIcon = new javax.swing.JLabel();
        menuRightClick = new javax.swing.JPopupMenu();
        dialogHistory = new javax.swing.JDialog();
        scrollPaneHistory = new javax.swing.JScrollPane();
        tableHistory = new javax.swing.JTable();
        buttonNextHistoryPage = new javax.swing.JButton();
        buttonPrevHistoryPage = new javax.swing.JButton();
        dialogPopupBat = new com.pouria.chatman.gui.PopupDialog();
        labelBat = new javax.swing.JLabel();
        scrollPaneConversation = new javax.swing.JScrollPane();
        textAreaConversation = new javax.swing.JEditorPane();
        scrollPaneInput = new javax.swing.JScrollPane();
        textAreaInput = new javax.swing.JEditorPane();
        labelConvoBg = new javax.swing.JLabel();
        labelInputBg = new javax.swing.JLabel();
        tableEmojis = new javax.swing.JTable();
        labelNextEmojiPage = new javax.swing.JLabel();
        labelPrevEmojiPage = new javax.swing.JLabel();
        labelSend = new javax.swing.JLabel();
        labelClear = new javax.swing.JLabel();
        labelStatusLabl = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        labelLoading = new javax.swing.JLabel();
        labelStatusBackground = new javax.swing.JLabel();
        labelFrameBg = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuChangeBg = new javax.swing.JMenuItem();
        menuShowHistory = new javax.swing.JMenuItem();
        menuSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuRemoteShutdown = new javax.swing.JMenuItem();
        menuAbortRemoteShutdown = new javax.swing.JMenuItem();
        menuAbortLocalShutdown = new javax.swing.JMenuItem();
        menuWakeOnLan = new javax.swing.JMenuItem();
        menuSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuAbout = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();

        dialogPopupNormal.setAlwaysOnTop(true);
        dialogPopupNormal.setMinimumSize(new java.awt.Dimension(180, 60));
        dialogPopupNormal.setResizable(false);

        panelPopupNormal.setBackground(new java.awt.Color(102, 102, 102));
        panelPopupNormal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelPopupNormal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelPopupNormal.setName(""); // NOI18N
        panelPopupNormal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelPopupNormalMouseReleased(evt);
            }
        });

        labelNewMessage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        labelNewMessage.setForeground(new java.awt.Color(231, 231, 231));
        labelNewMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNewMessage.setText("پیام جدید");

        labelMessageIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/new_message_50x50.png"))); // NOI18N

        javax.swing.GroupLayout panelPopupNormalLayout = new javax.swing.GroupLayout(panelPopupNormal);
        panelPopupNormal.setLayout(panelPopupNormalLayout);
        panelPopupNormalLayout.setHorizontalGroup(
            panelPopupNormalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPopupNormalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelMessageIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelNewMessage)
                .addGap(16, 16, 16))
        );
        panelPopupNormalLayout.setVerticalGroup(
            panelPopupNormalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelMessageIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelPopupNormalLayout.createSequentialGroup()
                .addComponent(labelNewMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dialogPopupNormalLayout = new javax.swing.GroupLayout(dialogPopupNormal.getContentPane());
        dialogPopupNormal.getContentPane().setLayout(dialogPopupNormalLayout);
        dialogPopupNormalLayout.setHorizontalGroup(
            dialogPopupNormalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPopupNormal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        dialogPopupNormalLayout.setVerticalGroup(
            dialogPopupNormalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelPopupNormal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        menuRightClick.setBackground(new java.awt.Color(51, 51, 51));
        menuRightClick.setForeground(new java.awt.Color(255, 255, 255));

        dialogHistory.setTitle("تاریخچه");
        dialogHistory.setAlwaysOnTop(true);
        dialogHistory.setIconImage(null);
        dialogHistory.setMinimumSize(new java.awt.Dimension(400, 300));
        dialogHistory.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dialogHistoryWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                dialogHistoryWindowOpened(evt);
            }
        });

        tableHistory.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "تاریخ", "متن"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableHistory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableHistory.setRowHeight(20);
        tableHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableHistoryMouseReleased(evt);
            }
        });
        scrollPaneHistory.setViewportView(tableHistory);

        buttonNextHistoryPage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        buttonNextHistoryPage.setText("صفحه بعد");
        buttonNextHistoryPage.setEnabled(false);
        buttonNextHistoryPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextHistoryPageActionPerformed(evt);
            }
        });

        buttonPrevHistoryPage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        buttonPrevHistoryPage.setText("صفحه قبل");
        buttonPrevHistoryPage.setEnabled(false);
        buttonPrevHistoryPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrevHistoryPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogHistoryLayout = new javax.swing.GroupLayout(dialogHistory.getContentPane());
        dialogHistory.getContentPane().setLayout(dialogHistoryLayout);
        dialogHistoryLayout.setHorizontalGroup(
            dialogHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogHistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogHistoryLayout.createSequentialGroup()
                        .addComponent(buttonPrevHistoryPage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonNextHistoryPage))
                    .addComponent(scrollPaneHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        dialogHistoryLayout.setVerticalGroup(
            dialogHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogHistoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dialogHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonNextHistoryPage)
                    .addComponent(buttonPrevHistoryPage))
                .addContainerGap())
        );

        dialogPopupBat.setAlwaysOnTop(true);
        dialogPopupBat.setMinimumSize(new java.awt.Dimension(400, 300));
        dialogPopupBat.setResizable(false);

        labelBat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/bat.gif"))); // NOI18N
        labelBat.setText("jLabel1");
        labelBat.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelBat.setMaximumSize(new java.awt.Dimension(400, 300));
        labelBat.setMinimumSize(new java.awt.Dimension(400, 300));
        labelBat.setPreferredSize(new java.awt.Dimension(400, 300));
        labelBat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelBatMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout dialogPopupBatLayout = new javax.swing.GroupLayout(dialogPopupBat.getContentPane());
        dialogPopupBat.getContentPane().setLayout(dialogPopupBatLayout);
        dialogPopupBatLayout.setHorizontalGroup(
            dialogPopupBatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelBat, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
        );
        dialogPopupBatLayout.setVerticalGroup(
            dialogPopupBatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelBat, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Chatman Rises");
        setFocusable(false);
        setMinimumSize(new java.awt.Dimension(500, 650));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        scrollPaneConversation.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.gray));
        scrollPaneConversation.setOpaque(false);
        scrollPaneConversation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                scrollPaneConversationMouseEntered(evt);
            }
        });

        textAreaConversation.setEditable(false);
        textAreaConversation.setBorder(null);
        textAreaConversation.setContentType("text/html"); // NOI18N
        textAreaConversation.setAutoscrolls(false);
        textAreaConversation.setOpaque(false);
        textAreaConversation.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                textAreaConversationHyperlinkUpdate(evt);
            }
        });
        textAreaConversation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textAreaConversationMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                textAreaConversationMouseEntered(evt);
            }
        });
        scrollPaneConversation.setViewportView(textAreaConversation);

        getContentPane().add(scrollPaneConversation);
        scrollPaneConversation.setBounds(20, 20, 455, 210);

        scrollPaneInput.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.gray));
        scrollPaneInput.setOpaque(false);

        textAreaInput.setBorder(null);
        textAreaInput.setContentType("text/html"); // NOI18N
        textAreaInput.setCaretColor(new java.awt.Color(255, 255, 255));
        textAreaInput.setOpaque(false);
        textAreaInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                textAreaInputMouseReleased(evt);
            }
        });
        textAreaInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textAreaInputKeyPressed(evt);
            }
        });
        scrollPaneInput.setViewportView(textAreaInput);

        getContentPane().add(scrollPaneInput);
        scrollPaneInput.setBounds(20, 330, 270, 150);

        labelConvoBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/opacity77.png"))); // NOI18N
        getContentPane().add(labelConvoBg);
        labelConvoBg.setBounds(20, 20, 455, 210);

        labelInputBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/opacity77.png"))); // NOI18N
        getContentPane().add(labelInputBg);
        labelInputBg.setBounds(20, 330, 270, 150);

        tableEmojis.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.gray));
        tableEmojis.setForeground(new java.awt.Color(255, 255, 255));
        tableEmojis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        tableEmojis.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableEmojis.setOpaque(false);
        tableEmojis.setRowHeight(30);
        tableEmojis.setRowSelectionAllowed(false);
        tableEmojis.setSelectionBackground(new java.awt.Color(255, 255, 255));
        tableEmojis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableEmojisMouseReleased(evt);
            }
        });
        getContentPane().add(tableEmojis);
        tableEmojis.setBounds(300, 330, 175, 150);

        labelNextEmojiPage.setBackground(new java.awt.Color(51, 51, 51));
        labelNextEmojiPage.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        labelNextEmojiPage.setForeground(new java.awt.Color(255, 255, 255));
        labelNextEmojiPage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNextEmojiPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/next.png"))); // NOI18N
        labelNextEmojiPage.setToolTipText("");
        labelNextEmojiPage.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labelNextEmojiPage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelNextEmojiPage.setOpaque(true);
        labelNextEmojiPage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelNextEmojiPageMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelNextEmojiPageMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelNextEmojiPageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelNextEmojiPageMouseReleased(evt);
            }
        });
        getContentPane().add(labelNextEmojiPage);
        labelNextEmojiPage.setBounds(390, 490, 30, 25);

        labelPrevEmojiPage.setBackground(new java.awt.Color(51, 51, 51));
        labelPrevEmojiPage.setFont(new java.awt.Font("Sylfaen", 1, 14)); // NOI18N
        labelPrevEmojiPage.setForeground(new java.awt.Color(255, 255, 255));
        labelPrevEmojiPage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPrevEmojiPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/prev.png"))); // NOI18N
        labelPrevEmojiPage.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labelPrevEmojiPage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelPrevEmojiPage.setOpaque(true);
        labelPrevEmojiPage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelPrevEmojiPageMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelPrevEmojiPageMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelPrevEmojiPageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelPrevEmojiPageMouseReleased(evt);
            }
        });
        getContentPane().add(labelPrevEmojiPage);
        labelPrevEmojiPage.setBounds(350, 490, 30, 25);

        labelSend.setBackground(new java.awt.Color(51, 51, 51));
        labelSend.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelSend.setForeground(new java.awt.Color(255, 255, 255));
        labelSend.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSend.setText("ارسال");
        labelSend.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labelSend.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelSend.setOpaque(true);
        labelSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelSendMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelSendMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelSendMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelSendMouseReleased(evt);
            }
        });
        getContentPane().add(labelSend);
        labelSend.setBounds(20, 490, 130, 30);

        labelClear.setBackground(new java.awt.Color(51, 51, 51));
        labelClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelClear.setForeground(new java.awt.Color(255, 255, 255));
        labelClear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelClear.setText("پاک کردن");
        labelClear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labelClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelClear.setOpaque(true);
        labelClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                labelClearMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                labelClearMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                labelClearMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                labelClearMouseReleased(evt);
            }
        });
        getContentPane().add(labelClear);
        labelClear.setBounds(160, 490, 130, 30);

        labelStatusLabl.setBackground(new java.awt.Color(51, 51, 51));
        labelStatusLabl.setForeground(new java.awt.Color(51, 51, 51));
        labelStatusLabl.setText("Status:");
        getContentPane().add(labelStatusLabl);
        labelStatusLabl.setBounds(20, 560, 150, 30);

        labelStatus.setBackground(new java.awt.Color(51, 51, 51));
        labelStatus.setForeground(new java.awt.Color(51, 51, 51));
        labelStatus.setText("در حال جستجوی شبکه");
        getContentPane().add(labelStatus);
        labelStatus.setBounds(170, 560, 300, 30);

        labelLoading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/loading.gif"))); // NOI18N
        getContentPane().add(labelLoading);
        labelLoading.setBounds(310, 557, 40, 40);

        labelStatusBackground.setBackground(new java.awt.Color(239, 239, 239));
        labelStatusBackground.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelStatusBackground.setAlignmentY(0.0F);
        labelStatusBackground.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.lightGray, java.awt.Color.darkGray));
        labelStatusBackground.setOpaque(true);
        getContentPane().add(labelStatusBackground);
        labelStatusBackground.setBounds(-5, 560, 560, 40);

        labelFrameBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/bg/batman.jpg"))); // NOI18N
        labelFrameBg.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        labelFrameBg.setIconTextGap(0);
        labelFrameBg.setMaximumSize(new java.awt.Dimension(500, 600));
        labelFrameBg.setMinimumSize(new java.awt.Dimension(500, 600));
        labelFrameBg.setPreferredSize(new java.awt.Dimension(500, 600));
        getContentPane().add(labelFrameBg);
        labelFrameBg.setBounds(0, 0, 494, 600);

        jMenuBar1.setBackground(new java.awt.Color(204, 204, 204));

        menuFile.setText("گزینه ها");
        menuFile.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        menuFile.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menuFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menuFile.setMargin(new java.awt.Insets(0, 10, 0, 0));
        menuFile.setPreferredSize(new java.awt.Dimension(70, 23));
        menuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileActionPerformed(evt);
            }
        });

        menuChangeBg.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        menuChangeBg.setText("تغییر پس زمینه");
        menuChangeBg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                menuChangeBgMouseReleased(evt);
            }
        });
        menuFile.add(menuChangeBg);

        menuShowHistory.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        menuShowHistory.setText("نمایش تاریخچه");
        menuShowHistory.setToolTipText("");
        menuShowHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuShowHistoryActionPerformed(evt);
            }
        });
        menuFile.add(menuShowHistory);
        menuFile.add(menuSeparator1);

        menuRemoteShutdown.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        menuRemoteShutdown.setText("خاموش کردن از راه دور");
        menuRemoteShutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRemoteShutdownActionPerformed(evt);
            }
        });
        menuFile.add(menuRemoteShutdown);

        menuAbortRemoteShutdown.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        menuAbortRemoteShutdown.setText("توقف خاموشی آن کامپیوتر");
        menuAbortRemoteShutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbortRemoteShutdownActionPerformed(evt);
            }
        });
        menuFile.add(menuAbortRemoteShutdown);

        menuAbortLocalShutdown.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        menuAbortLocalShutdown.setText("توقف خاموشی این کامپیوتر");
        menuAbortLocalShutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbortLocalShutdownActionPerformed(evt);
            }
        });
        menuFile.add(menuAbortLocalShutdown);

        menuWakeOnLan.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        menuWakeOnLan.setText("بیدار کردن");
        menuWakeOnLan.setEnabled(false);
        menuWakeOnLan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuWakeOnLanActionPerformed(evt);
            }
        });
        menuFile.add(menuWakeOnLan);
        menuFile.add(menuSeparator2);

        menuAbout.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        menuAbout.setText("درباره");
        menuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutActionPerformed(evt);
            }
        });
        menuFile.add(menuAbout);

        menuExit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        menuExit.setText("خروج");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        jMenuBar1.add(menuFile);

        setJMenuBar(jMenuBar1);

        getAccessibleContext().setAccessibleName("");
        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		hideWindow();
    }//GEN-LAST:event_formWindowClosing

    private void menuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileActionPerformed
        
    }//GEN-LAST:event_menuFileActionPerformed

    private void tableEmojisMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableEmojisMouseReleased

        int row = tableEmojis.getSelectedRow();
        int col = tableEmojis.getSelectedColumn();
         
        //replace the emoticon image with the larger image. we also add the width=50 and height=50 for better display
        String img = (String) tableEmojis.getValueAt(row, col);
		img = img.replaceAll("<html>(.*)emoticons(.*\\.gif')\\s(\\/>)<\\/html>", "$1emoticons_large$2  $3");
        
        
        //true = append
        updateInputText(img, true);
        textAreaInput.requestFocus();
    
    }//GEN-LAST:event_tableEmojisMouseReleased

    private void textAreaConversationHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_textAreaConversationHyperlinkUpdate
        //triggered when we click on a link
        if(evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED){
            try{
                String path = evt.getURL().toString();
                
                //open if it was a file
                if(path.contains("file://")){
                    path = path.substring(7);
                    Desktop.getDesktop().open(new File(path));
                }
                //browse if it was a URL
                else
                    Desktop.getDesktop().browse(evt.getURL().toURI());
                
            }catch(IOException e){
                message(CMHelper.getInstance().getStr("url_open_fail") + e.getMessage());
				CMHelper.getInstance().log("failed to open url: " + e.getMessage());
            }catch(URISyntaxException e){
                message(CMHelper.getInstance().getStr("bad_url") + e.getMessage());
				CMHelper.getInstance().log("failed to open url: " + e.getMessage());
            }
        }
		
    }//GEN-LAST:event_textAreaConversationHyperlinkUpdate

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void panelPopupNormalMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelPopupNormalMouseReleased
		popopClicked(evt.getButton());
    }//GEN-LAST:event_panelPopupNormalMouseReleased

    private void labelClearMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMouseReleased
		buttonMouseUP((JLabel)evt.getComponent());
		clearInputText();
    }//GEN-LAST:event_labelClearMouseReleased

    private void textAreaInputMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textAreaInputMouseReleased
        //show the right-click menu
        if(evt.getButton() == MouseEvent.BUTTON3){
            menuRightClick.show(textAreaInput, evt.getX(), evt.getY());
        } 
    }//GEN-LAST:event_textAreaInputMouseReleased

    private void dialogHistoryWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_dialogHistoryWindowOpened
        
		//is run everytime history dialog opens 
		
        historyPagination = new HistoryTablePagination(
                tableHistory,
                "history.sqlite",
                "SELECT date,text FROM chat_sessions ORDER BY date DESC"
        );

        try{
            historyPagination.nextPage();
            buttonNextHistoryPage.setEnabled(historyPagination.hasNext());
            
        }catch(SQLException e){
			CMHelper.getInstance().log("failed to show history window: " + e.getMessage());
            message(CMHelper.getInstance().getStr("history_fail") + e.getMessage());
        }

    }//GEN-LAST:event_dialogHistoryWindowOpened

    private void menuShowHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuShowHistoryActionPerformed
        //show history dialog
        dialogHistory.setLocationRelativeTo(null);
        dialogHistory.setVisible(true);
    }//GEN-LAST:event_menuShowHistoryActionPerformed

    private void tableHistoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableHistoryMouseReleased
        //put selected history item in textAreaChatHistory
        int row = tableHistory.getSelectedRow();
        String savedHistory = tableHistory.getModel().getValueAt(row, 1).toString();
		updateTextAreaConversation(savedHistory);
        
    }//GEN-LAST:event_tableHistoryMouseReleased

    private void dialogHistoryWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_dialogHistoryWindowClosing
        //restore the incoming text
		updateTextAreaConversation(chatman.getAllMessagesText());
    }//GEN-LAST:event_dialogHistoryWindowClosing

    private void buttonNextHistoryPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextHistoryPageActionPerformed
        
        try{
            historyPagination.nextPage();
            buttonNextHistoryPage.setEnabled(historyPagination.hasNext());
            buttonPrevHistoryPage.setEnabled(historyPagination.hasPrev());
        }catch(SQLException e){
			CMHelper.getInstance().log("history next page failed: " + e.getMessage());
            message(CMHelper.getInstance().getStr("history_fail") + e.getMessage());
        }
    }//GEN-LAST:event_buttonNextHistoryPageActionPerformed

    private void buttonPrevHistoryPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrevHistoryPageActionPerformed

        try{
            historyPagination.prevPage();
            buttonNextHistoryPage.setEnabled(historyPagination.hasNext());
            buttonPrevHistoryPage.setEnabled(historyPagination.hasPrev());
        }catch(SQLException e){
			CMHelper.getInstance().log("history prev page failed: " + e.getMessage());
            message(CMHelper.getInstance().getStr("history_fail") + e.getMessage());
        }
    }//GEN-LAST:event_buttonPrevHistoryPageActionPerformed

    private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutActionPerformed
        JOptionPane.showMessageDialog(null, CMHelper.getInstance().getStr("license"), CMHelper.getInstance().getStr("about"), JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuAboutActionPerformed

    private void menuRemoteShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRemoteShutdownActionPerformed

		int answer = JOptionPane.showConfirmDialog(null, CMHelper.getInstance().getStr("remote_shutdown_message"), CMHelper.getInstance().getStr("remote_shutdown_title"), JOptionPane.YES_NO_OPTION);
        if(answer == JOptionPane.YES_OPTION){
            CMMessage message = new CMMessage(CMMessage.TYPE_SHUTDOWN, "", username);
			chatman.sendMessage(message);
        }
    }//GEN-LAST:event_menuRemoteShutdownActionPerformed

    private void menuWakeOnLanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuWakeOnLanActionPerformed
        
		throw new UnsupportedOperationException("not supported yet");
		/*
		try{
			CMHelper.getInstance().sendWakeOnLan("remote_ip");
			
		}catch(IOException e){
			message(CMHelper.getInstance().getStr("wakeonlan_fail"));
		}
		*/
    }//GEN-LAST:event_menuWakeOnLanActionPerformed

    private void labelNextEmojiPageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelNextEmojiPageMouseReleased
        buttonMouseUP((JLabel)evt.getComponent());
		nextEmojiPage();
    }//GEN-LAST:event_labelNextEmojiPageMouseReleased

    private void labelPrevEmojiPageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrevEmojiPageMouseReleased
		buttonMouseUP((JLabel)evt.getComponent());
		prevEmojiPage();
    }//GEN-LAST:event_labelPrevEmojiPageMouseReleased

    private void menuAbortLocalShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbortLocalShutdownActionPerformed
		try{
			CMHelper.getInstance().abortLocalShutdown();
			String info = "[INFO: REMOTE SHUTDOWN ABORTED BY USER]";
            final CMMessage message = new CMMessage(CMMessage.TYPE_TEXT, info, username);
			chatman.sendMessage(message);
		}catch(IOException e){
			CMHelper.getInstance().log("failed to abort local shutdown (from menu)");
			(new CmdShowError(CMHelper.getInstance().getStr("shutdown-abort-fail"))).execute();  // we don't need invokelater because we're on GUI
		}
    }//GEN-LAST:event_menuAbortLocalShutdownActionPerformed

    private void menuChangeBgMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuChangeBgMouseReleased
        
		boolean isLeftClick = SwingUtilities.isLeftMouseButton(evt);
		
		if(isLeftClick){
			Background.getInstance().next();
		}
		else{
			Background.getInstance().prev();
		}
		
        setBackground(Background.getInstance().getCurrentURL());

        if(chatman != null)
            updateUserName();
       
        //doClick() so user doesn't have to open menu over and over again for changing bg
        menuFile.doClick();
		
    }//GEN-LAST:event_menuChangeBgMouseReleased

    private void labelSendMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSendMousePressed
		buttonMouseDown((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelSendMousePressed

    private void textAreaInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaInputKeyPressed
		if (evt.getKeyChar() == '\n'){ 
			evt.consume();
            sendInputText();
        }
    }//GEN-LAST:event_textAreaInputKeyPressed

    private void menuAbortRemoteShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbortRemoteShutdownActionPerformed
		int answer = JOptionPane.showConfirmDialog(null, CMHelper.getInstance().getStr("abort_remote_shutdown_message"), CMHelper.getInstance().getStr("abort_remote_shutdown_title"), JOptionPane.YES_NO_OPTION);
        if(answer == JOptionPane.YES_OPTION){
            final CMMessage message = new CMMessage(CMMessage.TYPE_ABORT_SHUTDOWN, "", username);
			chatman.sendMessage(message);
        }
    }//GEN-LAST:event_menuAbortRemoteShutdownActionPerformed

    private void labelBatMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelBatMouseReleased
        popopClicked(evt.getButton());
    }//GEN-LAST:event_labelBatMouseReleased

    private void textAreaConversationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textAreaConversationMouseClicked

		if(evt.getButton() == MouseEvent.BUTTON1){
			return;
		}
		
		HTMLEditorKit kit = (HTMLEditorKit)textAreaConversation.getEditorKit();
		
		if(conversationPaneCssToggle == 1){
			kit.setStyleSheet(cssShowTime);
		}
		else{
			kit.setStyleSheet(cssHideTime);
		}
		
		textAreaConversation.setEditorKit(kit);
		textAreaConversation.setText(defaultTextAreaHtml);
		updateTextAreaConversation(chatman.getAllMessagesText());

		conversationPaneCssToggle = 1 - conversationPaneCssToggle;
    }//GEN-LAST:event_textAreaConversationMouseClicked

    private void textAreaConversationMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textAreaConversationMouseEntered
		scrollPaneConversation.getVerticalScrollBar().removeAdjustmentListener(scrollListenerAlwaysDown);
    }//GEN-LAST:event_textAreaConversationMouseEntered

    private void scrollPaneConversationMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrollPaneConversationMouseEntered
        scrollPaneConversation.getVerticalScrollBar().removeAdjustmentListener(scrollListenerAlwaysDown);
    }//GEN-LAST:event_scrollPaneConversationMouseEntered

    private void labelSendMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSendMouseEntered
		buttonMouseEntered((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelSendMouseEntered

    private void labelSendMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSendMouseExited
		buttonMouseExitted((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelSendMouseExited

    private void labelClearMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMouseEntered
		buttonMouseEntered((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelClearMouseEntered

    private void labelClearMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMouseExited
		buttonMouseExitted((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelClearMouseExited

    private void labelPrevEmojiPageMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrevEmojiPageMouseEntered
		buttonMouseEntered((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelPrevEmojiPageMouseEntered

    private void labelPrevEmojiPageMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrevEmojiPageMouseExited
        buttonMouseExitted((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelPrevEmojiPageMouseExited

    private void labelNextEmojiPageMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelNextEmojiPageMouseEntered
		buttonMouseEntered((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelNextEmojiPageMouseEntered

    private void labelNextEmojiPageMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelNextEmojiPageMouseExited
        buttonMouseExitted((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelNextEmojiPageMouseExited

    private void labelSendMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelSendMouseReleased
        buttonMouseUP((JLabel)evt.getComponent());
		sendInputText();
    }//GEN-LAST:event_labelSendMouseReleased

    private void labelPrevEmojiPageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelPrevEmojiPageMousePressed
        buttonMouseDown((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelPrevEmojiPageMousePressed

    private void labelNextEmojiPageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelNextEmojiPageMousePressed
        buttonMouseDown((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelNextEmojiPageMousePressed

    private void labelClearMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelClearMousePressed
        buttonMouseDown((JLabel)evt.getComponent());
    }//GEN-LAST:event_labelClearMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


		/* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChatFrame frame = ChatFrame.getInstance();
				//in tartib bayad bashe hatman
                frame.initialize();
				frame.startChatman();
            }
        });
    }
     

    public void initialize(){
		
		createTrayIcon();
		
		//checks if history.sqlite exists and if not tries to create it
		try{
			CMHelper.getInstance().checkDatabaseFile();
		}catch(Exception e){
			(new CmdFatalErrorExit("history database cannot be created", e)).execute();
		}
        
        //Locale
		CMHelper.getInstance().setLocale(CMConfig.getInstance().getLocale());

        //setup GUI elements texts accordig to locale
        setupGUITexts();
		
		//set popup type
		newMessagePopup = dialogPopupBat;
		newMessagePopup.setMode(PopupDialog.MODE_BAT);
		
        //TextArea Dorp
        textAreaInput.setDropTarget(new DropTarget() {
			@Override
            public synchronized void drop(DropTargetDropEvent evt) {
                try {
                    evt.acceptDrop(DnDConstants.ACTION_COPY);
                    List<File> droppedFiles = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                    for (File file : droppedFiles) {
                        //check file size
                        int max = Integer.valueOf(CMConfig.getInstance().get("max-file-size", CMConfig.DEFAULT_FILEDROP_SIZEWARNING));
                        if(file.length()> max*1000*1000){
                            int choice = JOptionPane.showConfirmDialog(null, CMHelper.getInstance().getStr("file_big_warning"), CMHelper.getInstance().getStr("file_big_title"), JOptionPane.YES_NO_OPTION);
							if(choice == JOptionPane.NO_OPTION){
								//skip this file
								continue;
							}
                        }
                        //send the file
						String filePath = file.getAbsolutePath();
						String sender = CMHelper.getInstance().getStr("file_sent");			
						final CMMessage fileMessage = new CMMessage(CMMessage.TYPE_FILE, filePath, sender);
						//avoid getting a notification sound when dragging the file because window gets out of focus
						ChatFrame.getInstance().toFront();
						chatman.sendMessage(fileMessage);
                    }
                } catch (Exception ex) {
                    message(CMHelper.getInstance().getStr("open_file_fail"));
                }
            }
        });
        

        //TextArea right click
		
        //create a paste action to replace the default one because the default copoies styles/html too
        Action pasteAction = new AbstractAction(CMHelper.getInstance().getStr("paste")) {
            @Override
            public void actionPerformed(ActionEvent e) {
				//only raw text is pasted in a textfield with no styles/html
				JTextField tempField = new JTextField();
				tempField.paste();
				String pastedText = tempField.getText();
				//agar ax darim faghat akhar paste kon chon nemish
				if(getInputText().contains("<img")){
					updateInputText(pastedText, true);
					return;
				}
				//vaghti yek ghesmat as text select shode va mikhaim oonja paste konim				
				String selectedText = textAreaInput.getSelectedText();
				if(selectedText!=null && !selectedText.isEmpty()){
					String currentText = textAreaInput.getText();
					currentText = currentText.replace(selectedText, pastedText);
					textAreaInput.setText(currentText);
					return;
				}
				//vaghti vasate text paste mikonim
				int currentCaretPos = textAreaInput.getCaretPosition();
				textAreaInput.setCaretPosition(textAreaInput.getDocument().getLength());
				int lastCaretPos = textAreaInput.getCaretPosition();
				if(currentCaretPos != lastCaretPos){
					String currentText = getInputText();
					String firstHalf = currentText.substring(0, currentCaretPos-1);
					String secondHalf = currentText.substring(currentCaretPos-1, currentText.length());
					updateInputText(firstHalf+pastedText+secondHalf, false);
					textAreaInput.setCaretPosition(currentCaretPos + pastedText.length());
					return;
				}
				//vaghti akhare text paste mikonim
				updateInputText(pastedText, true);
				
            }
        };
		
		//replace default paste action with our own
		ActionMap map = textAreaInput.getActionMap();
		map.put(DefaultEditorKit.pasteAction, pasteAction);
		       
        //get default copy and cut actions
        Action copyAction = textAreaInput.getActionMap().get(DefaultEditorKit.copyAction);
        copyAction.putValue("Name", CMHelper.getInstance().getStr("copy"));
        Action cutAction = textAreaInput.getActionMap().get(DefaultEditorKit.cutAction);
        cutAction.putValue("Name", CMHelper.getInstance().getStr("cut"));
		
		//add copy/cut/paste actions to our right click menu
        menuRightClick.add (pasteAction); 
        menuRightClick.add (copyAction);
        menuRightClick.add (cutAction);

        
        //TextArea cursor
        ((HTMLEditorKit)textAreaInput.getEditorKit()).setDefaultCursor(new Cursor(Cursor.TEXT_CURSOR));
        
        
        //TextArea focus
        textAreaInput.requestFocus();
        
        
        //Table BG
        tableEmojis.setBackground(new Color(50,50,50,170));  

        
        //Populate Table
        //!!!IMPORTANT: only words in emoticons name 
        //!!!IMPORTANT: emoticons should have .gif extention and be stored in /resources/emoticons folder
        //!!!IMPORTANT: any change made here, or to emoticons names,format,folder,etc. should be also applied to regular expression accross the code
        emoticonsArray = new String[][][]{
			{
				{"hi", "smoke", "xd", "amazing", "victory"},
				{"bleed", "desperate", "spiral", "shake", "shooting"},
				{"calmdownwide", "killwide", "getout", "wallbangwide", "extraordinary"},
				{"yes", "grumpyno", "grumpy", "dog", "epicface"},
				{"snail", "wifi", "reset", "power", "question"}
			},
			{
				{"badluck", "ballerina", "boring", "dancing", "dizzy"},
				{"dunno", "exorcist", "flying", "happiness", "dancingg"},
				{"happyy", "help", "killme", "killmyself", "looser"},
				{"magic", "dreaming", "nah", "nono", "patpat"},
				{"poking", "scratching", "sleeping", "smooth", "stars"}
			},
			{
				{"steal", "taichi", "teehee", "what", "yeah"},
				{"yesss", "yipee", "dancingg", "bat", "na"},
				{"null", "null", "null", "null", "null"},
				{"null", "null", "null", "null", "null"},
				{"null", "null", "null", "null", "null"}
			}
        };
		nextEmojiPage();
		
       
        //Frame BG
        setBackground(Background.getInstance().getCurrentURL());
       
		//CSS for conversation pane 
		cssHideTime = new StyleSheet();
		cssShowTime = new StyleSheet();
		cssHideTime.addRule(".time{font-size:0px;color:#3a3a3a}");
		cssShowTime.addRule(".time{font-size:11px}");
		
		
        //Empty HTML Texts
        defaultTextAreaHtml = "<html><head><style type='text/css'>#text { color: white; font-family: Tahoma; font-size: 12px; }</style></head><body id='text'></body></html>";
		HTMLEditorKit tkit = (HTMLEditorKit)textAreaConversation.getEditorKit();
		tkit.setStyleSheet(cssHideTime);
		textAreaConversation.setEditorKit(tkit);		
        textAreaInput.setText(defaultTextAreaHtml);
		textAreaConversation.setText(defaultTextAreaHtml);
		
		
		//HTML of old messages line
		horizontalLineHtml = "<div style='text-align:center;font-size:8px;font-color:#606060'>older messages<br>____________________________________________________<br></div>";
        
        
        //Make ScrollPanes invisible
        scrollPaneInput.setOpaque(false);
        scrollPaneInput.getViewport().setOpaque(false);
        scrollPaneConversation.setOpaque(false);
        scrollPaneConversation.getViewport().setOpaque(false);
		
		
		//Fix the scroll
		scrollListenerAlwaysDown = new AdjustmentListener() {  
			public void adjustmentValueChanged(AdjustmentEvent e) {  
				e.getAdjustable().setValue(e.getAdjustable().getMaximum());  
			}
		};	
		
		
        //Icons
        //main frame
        java.net.URL url = getClass().getResource("/resources/icon.png");
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.createImage(url);
        this.setIconImage(img);

		
        //history dialog
        url = getClass().getResource("/resources/history.png");
        img = kit.createImage(url);
        dialogHistory.setIconImage(img);
        

        //Center
        this.setLocationRelativeTo(null);
		
		//Hide wake on lan menu
		menuWakeOnLan.setVisible(false);
		
		//Iransans font for sendInputText and clear
		try{
			InputStream is = getClass().getResourceAsStream("/resources/iransans.ttf");
			Font font = Font.createFont(Font.TRUETYPE_FONT, is);
			Font iranSans = font.deriveFont(15f);
			labelSend.setFont(iranSans);
			labelClear.setFont(iranSans);
		}catch(Exception e){
			//font will revert to Tahoma
		}
		
		updateUserName();

    } 
    
    //start Chatman as client/server
    public void startChatman(){
		
		chatman = new Chatman();
		
		try{
			
			chatman.getServer().start();
			
		//if we get a bind exception it means either there's a problem or chatman is already running
		}catch(Exception e){
			final String msg = e.getMessage();
			//send a showgui message to localhost (showgui messages always go to localhost)
			CMMessage showGuiMessage = new CMMessage(CMMessage.TYPE_SHOWGUI, "", "");
			chatman.getClient().setServer("127.0.0.1");
			//this is a very special case where we don't even have gui so we directly access the send() method
			boolean success = chatman.getClient().send(showGuiMessage);
			//if localhost responds we exit
			if(success){
				System.exit(0);
			}
			//if localhost doesn't repond it means there's a problem
			else{
				final Exception ex = e;
				String error = "Could not start server: " + msg;
				(new CmdFatalErrorExit(error, ex)).execute();
			}

		}
				
    }
    
    //Called from myInits()
	public void createTrayIcon(){
		
        if (!SystemTray.isSupported()) {
			CMHelper.getInstance().log("System tray not supported");
            return;
        }
		
		ImageIcon ticon = new ImageIcon(getClass().getResource("/resources/trayicon.png"));
        final TrayIcon trayIcon = new TrayIcon(ticon.getImage());
		final SystemTray tray = SystemTray.getSystemTray();
		final PopupMenu popup = new PopupMenu();

		
        // create a right-click menu 
        MenuItem openItem = new MenuItem("Open");
        MenuItem exitItem = new MenuItem("Exit");
        popup.add(openItem);
        popup.add(exitItem);
        trayIcon.setPopupMenu(popup);
		
		//create actions
		ActionListener actionOpen = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				popopClicked(MouseEvent.BUTTON1);
			}
		};
		ActionListener actionExit = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				exit(0);
			}
		};
		
		//add actions to items and double-click
		trayIcon.addActionListener(actionOpen);
		openItem.addActionListener(actionOpen);
		exitItem.addActionListener(actionExit);
		
        try {
            tray.add(trayIcon);
        } catch (AWTException e) {
			CMHelper.getInstance().log("Tray icon could not be added");
        }
	}
	
    public void setupGUITexts(){
        labelNewMessage.setText(CMHelper.getInstance().getStr("new_message"));
        dialogHistory.setTitle(CMHelper.getInstance().getStr("history"));
        buttonNextHistoryPage.setText(CMHelper.getInstance().getStr("next_page"));
        buttonPrevHistoryPage.setText(CMHelper.getInstance().getStr("prev_page"));
        labelSend.setText(CMHelper.getInstance().getStr("send"));
        labelClear.setText(CMHelper.getInstance().getStr("clear"));
        labelStatusLabl.setText(CMHelper.getInstance().getStr("status"));
        labelStatus.setText(CMHelper.getInstance().getStr("offline"));
        menuFile.setText(CMHelper.getInstance().getStr("options"));
        menuChangeBg.setText(CMHelper.getInstance().getStr("change_bg"));
        menuShowHistory.setText(CMHelper.getInstance().getStr("show_history"));
		menuRemoteShutdown.setText(CMHelper.getInstance().getStr("remote_shutdown"));
		menuAbortLocalShutdown.setText(CMHelper.getInstance().getStr("abort_local_shutdown"));
		menuAbortRemoteShutdown.setText(CMHelper.getInstance().getStr("abort_remote_shutdown"));
		menuWakeOnLan.setText(CMHelper.getInstance().getStr("wakeonlan"));
        menuAbout.setText(CMHelper.getInstance().getStr("about"));
        menuExit.setText(CMHelper.getInstance().getStr("exit"));
    }
	
	//populates a table with emoticons and returns the table model
	public AbstractTableModel getEmoticonTable(String[][] emoticonsArray){
		
			//make table cells uneditable
			AbstractTableModel model = new DefaultTableModel(5, 5){
				@Override
				public boolean isCellEditable(int row, int column){
					return false;
				}
			};

			//add emoticons to cells
			for(int row = 0;row<5;row++){
				for(int col = 0;col<5;col++){
					String name = emoticonsArray[row][col];
					URL url = getClass().getResource("/resources/emoticons/" + name + ".gif");
					String html;
					if(url == null){
						html = "<html></html>";
					}
					else{
						html = "<html><img src='" + url.toString() + "' /></html>";
					}
					model.setValueAt(html, row, col);
				}
			}
			
			return model;
	}
	
	//loads next set of emojis
	public void nextEmojiPage(){
		
		if(emojisIndex >= (emoticonsArray.length - 1) ){
			emojisIndex = 0;
		}
		else{
			emojisIndex++;
		}
		
		AbstractTableModel model = getEmoticonTable(emoticonsArray[emojisIndex]);
		tableEmojis.setModel(model);
		
	}
	
	//loads previous set of emojis
	public void prevEmojiPage(){
		
		if(emojisIndex <= 0){
			emojisIndex = (emoticonsArray.length -1);
		}
		else{
			emojisIndex--;
		}
		
		AbstractTableModel model = getEmoticonTable(emoticonsArray[emojisIndex]);
		tableEmojis.setModel(model);
		
	}

    //sends the content of textAreaInput
    private void sendInputText(){

		//fix for scroll
		int listenersCount = scrollPaneConversation.getVerticalScrollBar().getAdjustmentListeners().length;
		if(listenersCount == 0){
			scrollPaneConversation.getVerticalScrollBar().addAdjustmentListener(scrollListenerAlwaysDown);
		}
		     
        String text = getInputText();
        
        //return if input is empty
        if(text.isEmpty())
            return;

		final CMMessage message = new CMMessage(CMMessage.TYPE_TEXT, text, username);
		chatman.sendMessage(message);

		clearInputText();

    }
    
    //adds a message to messages history and shows it in conversation panel
    //it is called both when we sendInputText a message or receive a message
    public void showMessage(CMMessage message){
		
		//don't do anything for ping and other shit messages
		if(message.getDisplayableContent().isEmpty()){
			return;
		}
		
        //popup when first message received
        if(isHidden() && !message.isOurMessage()){
            newMessagePopup.showPopup();
            newMessagePopup.playSound();
        }
        //bleep if we received message and was not focused
        else if(!this.isActive() && !message.isOurMessage()){
            newMessagePopup.playSound();
        }
			
		updateTextAreaConversation(chatman.getAllMessagesText());

    }
	 
	private void updateTextAreaConversation(String text){
        String html = textAreaConversation.getText();
		Document doc = Jsoup.parse(html);
		Element textDiv = doc.select("body#text").first();
		if(textDiv == null){
			(new CmdInvokeLater(new CmdFatalErrorExit("tell pouria he has fucked up with the jsoup idea", (new Exception())))).execute();
		}
		textDiv.html(text);
		textAreaConversation.setText(doc.outerHtml());
	}
	  
    //is called when we want to add something to the outgoing text like emoticons, paste stuff, or disconnect message
    public void updateInputText(String t, boolean append){
        String html = textAreaInput.getText();
		Document doc = Jsoup.parse(html);
		Element textDiv = doc.select("body#text").first();
		if(textDiv == null){
			(new CmdInvokeLater(new CmdFatalErrorExit("tell pouria he has fucked up with the jsoup idea", (new Exception())))).execute();
		}
		if(append){
			textDiv.append(t);
		}
		else{
			textDiv.html(t);
		}
		textAreaInput.setText(doc.outerHtml());
    }
    
    public String getInputText(){
        String html = textAreaInput.getText();
		Document doc = Jsoup.parse(html);
		Element textDiv = doc.select("body#text").first();
		if(textDiv == null){
			(new CmdInvokeLater(new CmdFatalErrorExit("tell pouria he has fucked up with the jsoup idea", (new Exception())))).execute();
		}
		return textDiv.html();
    }
    
    public void clearInputText(){
        updateInputText("", false);
    }
	
	//do this when mouse enters a 'button'
	private void buttonMouseEntered(JLabel label){
		label.setBackground(colorLabelHovered);
	}
	
	//do this when mouse exits a 'button'
	private void buttonMouseExitted(JLabel label){
		label.setBackground(colorLabelNormal);
		//if mouse left while being held down
		buttonMouseUP(label);
	}
	
	private void buttonMouseDown(JLabel label){
		label.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
	}
	
	private void buttonMouseUP(JLabel label){
		label.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
	}
	 
    public void setBackground(URL url){
        labelFrameBg.setIcon(new javax.swing.ImageIcon(url));
    }
    
    public void updateUserName(){
        //background names are like batman_1.jpg or batman.png
        String name = Background.getInstance().getCurrent().split("\\.")[0].split("_")[0];        
        name = name.substring(0, 1).toUpperCase() + name.substring(1,name.length());
		username = name;
    }
	
	public String getUserName(){
		return this.username;
	}
	   
    //gives us the hero that we don't deserve
    public Chatman getChatmanInstance(){
        return chatman;
    }
	
	public void popopClicked(int mouseButton){
        //close the "New Message" popup and show the application window
        newMessagePopup.hidePopup();
		//if click show windows else just hide popup
		if(mouseButton == MouseEvent.BUTTON1){
			//Show
			showWindow();
			//Focus
			textAreaInput.requestFocus();
		}
	}

    //sets the status label at the bottom
    public void setLabelStatus(String s){
        labelStatus.setText(s);
    }
    
    //shows a message
    public void message(String m){
        m = "<html><span style='font-size:14px;'>" + m + "</span></html>";
        JOptionPane.showMessageDialog(null, m);
    } 
	
	//shows loading gif
	public void setLoadingVisible(boolean visible){
		labelLoading.setVisible(visible);
	}
	  
    //the mask is for the ones you love. we stay hidden unless it's neccessary to show up
    public boolean isHidden(){
        return !this.isVisible() && !newMessagePopup.isVisible();
    }
	
	//hides the chatman windows
	public void hideWindow(){
		this.setVisible(false);
	}
	
	//shows the chatman window
	public void showWindow(){
		this.setVisible(true);
	}
	
	
    //the end of chatman. that's it. no auto pilot :(
    public synchronized void exit(int exitCode){
        chatman.saveHistory();
        CMConfig.getInstance().save();
        System.exit(exitCode);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonNextHistoryPage;
    private javax.swing.JButton buttonPrevHistoryPage;
    private javax.swing.JDialog dialogHistory;
    private com.pouria.chatman.gui.PopupDialog dialogPopupBat;
    private com.pouria.chatman.gui.PopupDialog dialogPopupNormal;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel labelBat;
    private javax.swing.JLabel labelClear;
    private javax.swing.JLabel labelConvoBg;
    private javax.swing.JLabel labelFrameBg;
    private javax.swing.JLabel labelInputBg;
    private javax.swing.JLabel labelLoading;
    private javax.swing.JLabel labelMessageIcon;
    private javax.swing.JLabel labelNewMessage;
    private javax.swing.JLabel labelNextEmojiPage;
    private javax.swing.JLabel labelPrevEmojiPage;
    private javax.swing.JLabel labelSend;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelStatusBackground;
    private javax.swing.JLabel labelStatusLabl;
    private javax.swing.JMenuItem menuAbortLocalShutdown;
    private javax.swing.JMenuItem menuAbortRemoteShutdown;
    private javax.swing.JMenuItem menuAbout;
    private javax.swing.JMenuItem menuChangeBg;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuRemoteShutdown;
    private javax.swing.JPopupMenu menuRightClick;
    private javax.swing.JPopupMenu.Separator menuSeparator1;
    private javax.swing.JPopupMenu.Separator menuSeparator2;
    private javax.swing.JMenuItem menuShowHistory;
    private javax.swing.JMenuItem menuWakeOnLan;
    private javax.swing.JPanel panelPopupNormal;
    private javax.swing.JScrollPane scrollPaneConversation;
    private javax.swing.JScrollPane scrollPaneHistory;
    private javax.swing.JScrollPane scrollPaneInput;
    private javax.swing.JTable tableEmojis;
    private javax.swing.JTable tableHistory;
    private javax.swing.JEditorPane textAreaConversation;
    private javax.swing.JEditorPane textAreaInput;
    // End of variables declaration//GEN-END:variables
}
